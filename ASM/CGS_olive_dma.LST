 00000000                                  CPU  "aSYMPL32.TBL"
 00000000                                  HOF  "MOT32"
 00000000                                  WDLN 4
                                ; CGS FP3211 test1
                                ; version 1.01   Nov 29, 2015
                                ; Author:  Jerry D. Harthcock
                                ; Copyright (C) 2015.  All rights reserved without prejudice.
                                           
                                ;--------------------------------------------------------------------------           
                                ;         internal memory-mapped h/w registers
                                ;--------------------------------------------------------------------------
 00000073         =             AR3:            EQU     0x73                    ;Auxiliary Reg 3
 00000072         =             AR2:            EQU     0x72                    ;Auxiliary Reg 2
 00000071         =             AR1:            EQU     0x71                    ;Auxiliary Reg 1
 00000070         =             AR0:            EQU     0x70                    ;Auxiliary Reg 0
 0000006F         =             PC:             EQU     0x6F                    ;Program Counter
 0000006E         =             PC_COPY:        EQU     0x6E
 0000006D         =             STATUS:         EQU     0x6D                    ;Statis Register
 00000069         =             LPCNT1:         EQU     0x69                    ;H/W loop counter 1
 00000068         =             LPCNT0:         EQU     0x68                    ;H/W loop counter 0
 00000067         =             TIMER:          EQU     0x67                    ;timer
 00000064         =             RPT:            EQU     0x64                    ;repeat counter location
 00000062         =             DMA1_CSR:       EQU     0x62                    ;DMA_Done is DMAn_CSR[21], interrupt enable is DMAn_CSR[20], 20-bit count value {DMAn_CSR[19:0]} 
 00000061         =             DMA1_RDADDRS:   EQU     0x61                    ;DMA1 reads from GPU
 00000060         =             DMA1_WRADDRS:   EQU     0x60                    ;DMA1 writes to DataPool
 0000005F         =             FRC_IRQ:        EQU     0x5F
 0000005E         =             DMA0_CSR:       EQU     0x5E                    ;DMA_Done is DMAn_CSR[21], interrupt enable is DMAn_CSR[20], 20-bit count value {DMAn_CSR[19:0]}
 0000005D         =             DMA0_RDADDRS:   EQU     0x5D                    ;DMA0 reads from DataPool
 0000005C         =             DMA0_WRADDRS:   EQU     0x5C                    ;DMA0 writes to GPU
 0000005B         =             DONE_IE:        EQU     0x5B                    ;thread[15:0] Done & interrupt enable register
 0000005A         =             COMMAND:        EQU     0x5A                    ;command register
                                
                                
                                ;zero-page storage
 00000001         =             NMI_save        EQU     0x01                    ;save PC_COPY here immediately upon entry to NMI service routine
 00000002         =             EXC_save        EQU     0x02                    ;save PC_COPY here immediately upon entry to EXC service routine
 00000003         =             IRQ_PC_save     EQU     0x03                    ;save PC_COPY here immediately upon entry to general-purpose IRQ service routine
 00000014         =             work_1:         EQU     0x14                    
 00000015         =             work_2:         EQU     0x15
 00000016         =             work_3:         EQU     0x16
 00000017         =             work_4:         EQU     0x17
 00000018         =             triDivXn:       EQU     0x18                    ;number of triangles per thread, not counting remainder
 00000019         =             remndr:         EQU     0x19                    ;remainder of total triangles/n threads, must add one additional triangle to 
                                                                                ;the triangles/n amount for each thread until the remainder runs out
 0000001A         =             threads:        EQU     0x1A                    ;this location will contain the initial number of threads available for this implementation                                                
                                                                                
 0000001E         =             sign_mask:      EQU     0x1E                    ;0x80000000 goes here--used for setting, clearing, toggling sign bit
                                
                                ;for storage of parameters for 3D transform
 0000001F         =             cmnd_save:      EQU     0x1F                    ;command save location
 00000020         =             triangles:      EQU     0x20                    ;total number of triangles to process
 00002000         =             PDB_list:       EQU     0x2000                  ;pointer to start of PDB list in CGS ROM via indirect table-read
                                
 0000010E         =             XFORM_XYZ:      EQU     0x010E                  ;this is the command to issue to the shader threads to execute from
                                                                                ;to carry out the 3D transform on all three axis, which includes
                                                                                ;scale_xyz, rotate_xyz, translate_xyz
                                
                                ;constant immediate value equates
 00000020         =             DONE_BIT:   EQU     0x20                        ;bit [5] is DONE Bit in status register 
 0000001F         =             DONE_15:    EQU     31                          ;done bit position in DONE_IE register.  When tested, if==1, then this is a four-shader implementation
 00000017         =             DONE_7:     EQU     23                          ;done bit position in DONE_IE register.  When tested, if==1, then this is a two-shader implementation
                                                                                ;assuming DONE_15 is 0
                                
                                ;pointers to first location in each PDB
 00000000                                       org     0x0000
 00000000 00010000              PDB0:           DFL     0x00010000              ;parameter-data buffer shader0 thread0
 00000001 00010400              PDB1:           DFL     0x00010400              ;parameter-data buffer shader0 thread1
 00000002 00010800              PDB2:           DFL     0x00010800              ;parameter-data buffer shader0 thread2
 00000003 00010C00              PDB3:           DFL     0x00010C00              ;parameter-data buffer shader0 thread3
 00000004 00012000              PDB4:           DFL     0x00012000              ;parameter-data buffer shader1 thread0
 00000005 00012400              PDB5:           DFL     0x00012400              ;parameter-data buffer shader1 thread1
 00000006 00012800              PDB6:           DFL     0x00012800              ;parameter-data buffer shader1 thread2
 00000007 00012C00              PDB7:           DFL     0x00012C00              ;parameter-data buffer shader1 thread3
 00000008 00014000              PDB8:           DFL     0x00014000              ;parameter-data buffer shader2 thread0
 00000009 00014400              PDB9:           DFL     0x00014400              ;parameter-data buffer shader2 thread1
 0000000A 00014800              PDB10:          DFL     0x00014800              ;parameter-data buffer shader2 thread2
 0000000B 00014C00              PDB11:          DFL     0x00014C00              ;parameter-data buffer shader2 thread3
 0000000C 00016000              PDB12:          DFL     0x00016000              ;parameter-data buffer shader3 thread0
 0000000D 00016400              PDB13:          DFL     0x00016400              ;parameter-data buffer shader3 thread1
 0000000E 00016800              PDB14:          DFL     0x00016800              ;parameter-data buffer shader3 thread2
 0000000F 00016C00              PDB15:          DFL     0x00016C00              ;parameter-data buffer shader3 thread3
                                
                                ;SYSTEM memory (data pool) pointers
 00000010 00020000              SYSMEMstart:    DFL     0x00020000              ;system memory start location mapped to CGS physical location 0x00010000
 00000011 00020001              TOTALtri:       DFL     0x00020001              ;total number of triangles to count
 00000012 00020002              SCALX:          DFL     0x00020002              ;scale X, first in the list of the 9 xformation parameters
 00000013 0002000B              FIRSTtri:       DFL     0x0002000B              ;this is the location in SYSMEM containing first X1 of first triangle
 00000014 FFFF0FFF              CLRshdrRSTmask: DFL     0xFFFF0FFF              ;use this mask to clear all Shader resets
 00000015 20000000              swapDMAbytes:   DFL     0x20000000              ;use this mask to set DMA "swap_bytes" bit to convert from little endian to big
 00000016 C001FEED              cool_feed:      DFL     0xC001FEED              ;semaphore for tell CPU we are done processing
                                
                                ;DESCRIPTION
                                ;This coarse-grained scheduler (CGS) routine simply polls the COMMAND register for a value that is not zero.
                                ;If the value is not zero, it is a command.  Presently, the convention is that the command value is the entry-point
                                ;for the routine that will carry it out.  Once the CGS receives a command, it loads the PC with that value, which is
                                ;the entry point for the routine.  Since this example has only one command, no need to refer to a look-up table
                                ;for corresponding entry-points for the shader threads to run to carry out the command.  In this instance, the 
                                ;command that the shader threads must execute to carry out the overall command is "0x010E, which is their respective
                                ;entry-point.
                                ;
                                ;So, now that the CGS has received the command, it then does a simple calculation to determine how many triangles 
                                ;each shader thread is to receive.  This is done by dividing the triangle count in the datapool parameter buffer
                                ;by the number of available threads.  For example, in this instance, there are 252 triangles that make up the "olive".
                                ;Thus, for a single shader with four available threads, this means that each thread will receive 64 triangles to process.
                                ;For two shaders with eight available threads, this means that four threads will receive 32 triangles and four will
                                ;receive 31 triangles.
                                ;
                                ;Once this calulation is made, the CGS then pushes into each thread's private parameter-data buffer (PDB) the triangle count,
                                ;all nine parameters and then the triangles, each comprising a vector made up of nine single-precision, 32-bit floats
                                ;for {x1,y1,z1,x2,y2,z2,x3,y3,z3}.  For the parameters and triangle count, the CGS does this itself.  For the actual
                                ;triangle vectors, it employs DMA channel 0 to transfer triangle vectors from datapool to individual thread PDBs.
                                ;
                                ;Once the triangle count, parameters, and vectors are pushed into each thread's PDB, it issues each thread a command.
                                ;Note that latency can be reduced by issuing a command to the respective thread immediately after that thread's push
                                ;has been completed, rather than wait until after all threads have been pushed.  In fact, in this instance, the command
                                ;can be given immediately after a given thread's parameters have been pushed, because the triangle vectors are pushed
                                ;using DMA0 and the thread will not be able to out-read (i.e., outrun), the DMA writes.
                                ;
                                ;Once the triangles are pushed and the commands issued, the CGS then polls the DONE flags for each thread.  When determined
                                ;that a particular thread is finished processing, the CGS then uses DMA channel 1 to pull results out of that particular
                                ;thread's PDB and transfer them back to the datapool at the same locations the originals came from.
                                ;
                                ;Finally, once all thread processing is complete, the CGS then writes the value "0xC001FEED" to datapool location 0x0000
                                ;to signal the CPU that results are available.  It then jumps back to the beginning of the program and begins polling the 
                                ;command register for another command to process.
                                ;
                                ;It should be noted here that the COMMAND buffer (external system) write-side is mapped to datapool physical location 0x0000.  
                                ;The read-side is mapped to CGS location 0x005A.  The CGS COMMAND register is a separate, physical register that shadows
                                ;location 0x0000 of the datapool and is automatically self-cleared when the CGS reads it.  Thus, when the CGS writes to 
                                ;location 0x0000 with the 0xC001FEED (processing complete) semaphore, it is written to datapool SRAM location 0x0000 and not  
                                ;the COMMAND register, thus the CGS will not fall through again when it makes its jump back to DONE.
                                            
 000000FE                                   org     0x0FE              
                                
 000000FE 0000010B              Constants:  DFL     start                       ;program memory locations 0x000 - 0x0FF reserved for look-up table
                                        
 000000FF 0000004E              prog_len:   DFL     progend - Constants
                                              
                                ;           func    dest, srcA, srcB 
                                
 00000100                                   org     0x00000100
 00000100 306F0104              RST_VECT:   mov     PC, #done                   ;reset vector
 00000101 306F0143              NMI_VECT:   mov     PC, #NMI_                   ;NMI vector
 00000102 306F0146              EXC_VECT:   mov     PC, #EXC_                   ;EXC_VECT
 00000103 306F0149              IRQ_VECT:   mov     PC, #IRQ_                   ;maskable general-purpose interrupt vector
 00000104 126D6D20              done:       or      STATUS, STATUS, #DONE_BIT   ; signal external CPU (load-balancer/coarse-grain scheduler) process is done
                                                                                ;note that the DONE_BIT is already set upon initial entry but is cleared three instructions below "start"
                                                                                ;to signal CPU thread has started (ie, not done)        
 00000105 001F5A00              spin:       mov     cmnd_save, COMMAND          ;read CGS command register located at 0x05A and save it 
 00000106 04FF006D                          bcnd    spin, Z                     ;if command is 0 then wait for this value to become non-zero
 00000107 30679C40                          mov     TIMER, #40000               ;load time-out timer with sufficient time to get the job done 
 00000108 20731000                          mov     AR3, @SYSMEMstart           ;point to first location in datapool memory
 00000109 30770000                          mov     *AR3, #0                    ;clear this location to signal CPU that command is acknowledged and processing has begun 
 0000010A 006F1F00                          mov     PC, cmnd_save               ;write the received command to PC, this is the command entry point
                                            
                                    ;entry point to the 3D transform CGS routine            
 0000010B 301F010E              start:      mov     cmnd_save, #XFORM_XYZ       ;this is the command that will be issued to each thread of each shader
                                    ;determine number of threads available
 0000010C 20701100                          mov     AR0, @TOTALtri              ;point to total number of triangles to process
 0000010D 30712000                          mov     AR1, #PDB_list              ;load AR1 with pointer to PDB list (via CGS indirect table-read) 
 0000010E 136D6D20                          xor     STATUS, STATUS, #DONE_BIT   ;clear done bit to indicate command received and is now being processed--execution order is important to give load AR0 time to execute before use
 0000010F 00207800                          mov     triangles, *AR0++           ;get total triangle count and save in "triangles" and update AR0 to point to SCALX in parameter list 
 00000110 04045F5B              is_it_16:   btbc    is_it_8, DONE_15, DONE_IE   ;test done bit for thread15.  If==1 then 16 threads avialable (four-shader version) 
 00000111 301A0010                          mov     threads, #16
 00000112 05182043                          shft    triDivXn, triangles, RIGHT, 4    ;divide total triangles x16 to determine number of triangles per thread
 00000113 04071F6D                          bcnd    initialize, ALWAYS          
 00000114 0404575B              is_it_8:    btbc    its_4, DONE_7, DONE_IE      ;test done bit for thread7.   If==1 then 8 theads available (two-shader version).
 00000115 301A0008                          mov     threads, #8                 
 00000116 05182042                          shft    triDivXn, triangles, RIGHT, 3    ;divide total triangles x8 to determine number of triangles per thread
 00000117 04031F6D                          bcnd    initialize, ALWAYS          
 00000118 301A0004              its_4:      mov     threads, #4                 ;else there are 4 threads available (one-shader version)
 00000119 05182041                          shft    triDivXn, triangles, RIGHT, 2    ;divide total triangles x4 to determine number of triangles per thread
 0000011A 00681A00              initialize: mov     LPCNT0, threads             ;load loop counter 0 with number of threads that need to be passed parameters and data
 0000011B 0A15181A                          mul     work_2, triDivXn, threads   ;multiply result to get integer multiple
 0000011C 216D146D                          and     STATUS, @CLRshdrRSTmask, STATUS ;clear shader3, 2, 1, 0 reset lines
 0000011D 08192015                          sub     remndr, triangles, work_2   ;get remainder to be distributied one additional triangle per thread until remainder depleated
 0000011E 205D1300                          mov     DMA0_RDADDRS, @FIRSTtri     ;point to first triangle in datapool
 0000011F 00161900                          mov     work_3, remndr              ;save original remainder                      
 00000120 16727501              xferLoop:   add     AR2, *AR1, #1               ;load AR2 with pointer to current PDB (+1) to receive the transfer of parameters and data
                                                                                ;so that AR2 is pointing to triangle count for that thread's PDB
 00000121 00141800                          mov     work_1, triDivXn            ;might need to do some math with triDivXn so make a copy
 00000122 00191900                          mov     remndr, remndr              ;copy/save remndr to itself to check for zero
 00000123 0403006D                          bcnd    no_add, Z                   ;if remainder is zero then don't add one more this time
 00000124 16141401                          add     work_1, work_1, #1          ;else add one to it to get total triangles for this thread and store in LPCNT1
 00000125 18191901                          sub     remndr, remndr, #1          ;and subtract one from remainder
                                ;
                                ;--------------transfer parameters to each thread's PDB --------------------------------------------------------
                                ;
 00000126 007A1400              no_add:     mov     *AR2++, work_1              ;copy number of triangles this thread is to process
 00000127 30640008                          rpt     #8                          ;copy the qty (9) 3D transform parameters to current PDB using repeat instruction
 00000128 007A7800                          mov     *AR2++, *AR0++              ;copy SCALX to current PDB
                                ;            mov     *AR2++, *AR0++              ;copy SCALY to current PDB
                                ;            mov     *AR2++, *AR0++              ;copy SCALZ to current PDB
                                ;            mov     *AR2++, *AR0++              ;copy ROTX to current PDB
                                ;            mov     *AR2++, *AR0++              ;copy ROTY to current PDB
                                ;            mov     *AR2++, *AR0++              ;copy ROTZ to current PDB
                                ;            mov     *AR2++, *AR0++              ;copy TRANSX to current PDB
                                ;            mov     *AR2++, *AR0++              ;copy TRANSY to current PDB
                                ;            mov     *AR2++, *AR0++              ;copy TRANSZ to current PDB
 00000129 20701200                          mov     AR0, @SCALX                 ;re-initialize AR0 to point to back to parameter portion of the job request 
                                ;            
                                ;--------------transfer vector data from data pool to each thread's PDB -------------------------------------------            
                                ;
 0000012A 005C7200              triLoop:    mov     DMA0_WRADDRS, AR2           ;point to destination in thread's private PDB for first X1 of first triangle
 0000012B 1A171409                          mul     work_4, work_1, #9          ;determine length of DMA transfer
                                ;            or      DMA0_CSR, @swapDMAbytes, work_4  ;transfer entire vector for all triangles for current PDB, little endian 
 0000012C 005E1700                          mov      DMA0_CSR, work_4           ;transfer entire vector for all triangles for current PDB, endian-ness unchanged 
 0000012D 00727900                          mov     AR2, *AR1++                 ;point back to first location in PDB, which is that thread's start address and semaphore location
 0000012E 04005F5E              wait0:      btbc    wait0, 31, DMA0_CSR         ;wait for transfer to complete
 0000012F 00761F00                          mov     *AR2, cmnd_save             ;write start address (semaphore) to current PDB                                              
 00000130 04F00F68                          dbnz    xferLoop, LPCNT0            ;xfer next group of parameters and data to next PDB until entire 3D object is loaded
                                ;
                                ;--------------transfer results from PDBs back to data pool---------------------------------------------------------
                                ;
 00000131 00191600                          mov     remndr, work_3              ;copy work_3 into remainder to restore it
 00000132 00681A00                          mov     LPCNT0, threads             ;load LPCNT0 with number of PDBs to copy back to SYSMEM
 00000133 0400525B              wait1:      btbc    wait1, 18, DONE_IE          ;wait until thread1 is done then pull results from each PDB and store in SYStem memory
 00000134 30712000                          mov     AR1, #PDB_list              ;point to first location in first PDB (PDB0) 
 00000135 20601300                          mov     DMA1_WRADDRS, @FIRSTtri     ;datapool destination address
 00000136 1661790B              nextPDB:    add     DMA1_RDADDRS, *AR1++, #11   ;thread private PDB address
 00000137 00141800                          mov     work_1, triDivXn            ;copy number of triangles per thread to work_1
 00000138 00191900                          mov     remndr, remndr              ;see if remainder is zero
 00000139 0403006D                          bcnd    copyPDB, Z                  ;if zero then don't add one more from remainder
 0000013A 16141401                          add     work_1, work_1, #1
 0000013B 18191901                          sub     remndr, remndr, #1          ;sub 1
 0000013C 1A171409              copyPDB:    mul     work_4, work_1, #9          ;determine length of DMA transfer
                                ;            or      DMA1_CSR, @swapDMAbytes, work_4  ;transfer entire result vector from PDB back to datapool, big endian
 0000013D 00621700                          mov      DMA1_CSR,  work_4          ;transfer entire result vector from PDB back to datapool, endian-ness unchanged
 0000013E 04005F62              wait2:      btbc    wait2, 31, DMA1_CSR         ;wait for transfer to complete
 0000013F 04F70F68                          dbnz    nextPDB, LPCNT0             ;pull next PDB
 00000140 20731000                          mov     AR3, @SYSMEMstart           ;point to first location in datapool
 00000141 20771600                          mov     *AR3, @cool_feed            ;tell CPU we are done processing  
 00000142 306F0104                          mov     PC, #done                   ;jump to done, semphr test and spin for next packet
                                            
                                ; interrupt service routines        
 00000143 00016E00              NMI_:       mov     NMI_save, PC_COPY           ;save return address from non-maskable interrupt (time-out timer in this instance)
 00000144 30672710                          mov     TIMER, #10000               ;put a new value in the timer
 00000145 006F0100                          mov     PC, NMI_save                ;return from interrupt
                                        
 00000146 00026E00              EXC_:       mov     EXC_save, PC_COPY           ;save return address
 00000147 30672710                          mov     TIMER, #10000               ;put a new value in the timer
 00000148 006F0200                          mov     PC, EXC_save                ;return from interrupt
                                
 00000149 00036E00              IRQ_:       mov     IRQ_PC_save, PC_COPY        ;save return address (general-purpose, maskable interrupt)
 0000014A 30672710                          mov     TIMER, #10000               ;put a new value in the timer
 0000014B 006F0300                          mov     PC, IRQ_PC_save             ;return from interrupt            
 0000014C                       progend:        
 00000000                                   end
00000070  AR0                00000071  AR1                00000072  AR2                
00000073  AR3                00000014  CLRSHDRRSTMASK     0000001F  CMND_SAVE          
0000005A  COMMAND            000000FE  CONSTANTS          00000016  COOL_FEED          
0000013C  COPYPDB            0000005E  DMA0_CSR           0000005D  DMA0_RDADDRS       
0000005C  DMA0_WRADDRS       00000062  DMA1_CSR           00000061  DMA1_RDADDRS       
00000060  DMA1_WRADDRS       00000104  DONE               0000001F  DONE_15            
00000017  DONE_7             00000020  DONE_BIT           0000005B  DONE_IE            
00000146  EXC_               00000002  EXC_SAVE           00000102  EXC_VECT           
000000F8  EXP_0              000000F9  EXP_1              000000FA  EXP_2              
000000FB  EXP_3              000000FC  EXP_4              000000FD  EXP_5              
000000FE  EXP_6              000000FF  EXP_7              00000080  FADD_0             
00000081  FADD_1             00000082  FADD_2             00000083  FADD_3             
00000084  FADD_4             00000085  FADD_5             00000086  FADD_6             
00000087  FADD_7             00000088  FADD_8             00000089  FADD_9             
0000008A  FADD_A             0000008B  FADD_B             0000008C  FADD_C             
0000008D  FADD_D             0000008E  FADD_E             0000008F  FADD_F             
000000C0  FDIV_0             000000C1  FDIV_1             000000C2  FDIV_2             
000000C3  FDIV_3             000000C4  FDIV_4             000000C5  FDIV_5             
000000C6  FDIV_6             000000C7  FDIV_7             000000C8  FDIV_8             
000000C9  FDIV_9             000000CA  FDIV_A             000000CB  FDIV_B             
000000CC  FDIV_C             000000CD  FDIV_D             000000CE  FDIV_E             
000000CF  FDIV_F             00000013  FIRSTTRI           000000E0  FMA_0              
000000E1  FMA_1              000000E2  FMA_2              000000E3  FMA_3              
000000E4  FMA_4              000000E5  FMA_5              000000E6  FMA_6              
000000E7  FMA_7              000000E8  FMA_8              000000E9  FMA_9              
000000EA  FMA_A              000000EB  FMA_B              000000EC  FMA_C              
000000ED  FMA_D              000000EE  FMA_E              000000EF  FMA_F              
000000A0  FMUL_0             000000A1  FMUL_1             000000A2  FMUL_2             
000000A3  FMUL_3             000000A4  FMUL_4             000000A5  FMUL_5             
000000A6  FMUL_6             000000A7  FMUL_7             000000A8  FMUL_8             
000000A9  FMUL_9             000000AA  FMUL_A             000000AB  FMUL_B             
000000AC  FMUL_C             000000AD  FMUL_D             000000AE  FMUL_E             
000000AF  FMUL_F             0000005F  FRC_IRQ            00000090  FSUB_0             
00000091  FSUB_1             00000092  FSUB_2             00000093  FSUB_3             
00000094  FSUB_4             00000095  FSUB_5             00000096  FSUB_6             
00000097  FSUB_7             00000098  FSUB_8             00000099  FSUB_9             
0000009A  FSUB_A             0000009B  FSUB_B             0000009C  FSUB_C             
0000009D  FSUB_D             0000009E  FSUB_E             0000009F  FSUB_F             
000000B8  FTOI_0             000000B9  FTOI_1             000000BA  FTOI_2             
000000BB  FTOI_3             000000BC  FTOI_4             000000BD  FTOI_5             
000000BE  FTOI_6             000000BF  FTOI_7             0000011A  INITIALIZE         
00000149  IRQ_               00000003  IRQ_PC_SAVE        00000103  IRQ_VECT           
00000110  IS_IT_16           00000114  IS_IT_8            000000B0  ITOF_0             
000000B1  ITOF_1             000000B2  ITOF_2             000000B3  ITOF_3             
000000B4  ITOF_4             000000B5  ITOF_5             000000B6  ITOF_6             
000000B7  ITOF_7             00000118  ITS_4              000000F0  LOG_0              
000000F1  LOG_1              000000F2  LOG_2              000000F3  LOG_3              
000000F4  LOG_4              000000F5  LOG_5              000000F6  LOG_6              
000000F7  LOG_7              00000068  LPCNT0             00000069  LPCNT1             
00000136  NEXTPDB            00000143  NMI_               00000001  NMI_SAVE           
00000101  NMI_VECT           00000126  NO_ADD             0000006F  PC                 
0000006E  PC_COPY            00000000  PDB0               00000001  PDB1               
0000000A  PDB10              0000000B  PDB11              0000000C  PDB12              
0000000D  PDB13              0000000E  PDB14              0000000F  PDB15              
00000002  PDB2               00000003  PDB3               00000004  PDB4               
00000005  PDB5               00000006  PDB6               00000007  PDB7               
00000008  PDB8               00000009  PDB9               00002000  PDB_LIST           
0000014C  PROGEND            000000FF  PROG_LEN           00000019  REMNDR             
00000064  RPT                00000100  RST_VECT           00000012  SCALX              
0000001E  SIGN_MASK          00000105  SPIN               000000D0  SQRT_0             
000000D1  SQRT_1             000000D2  SQRT_2             000000D3  SQRT_3             
000000D4  SQRT_4             000000D5  SQRT_5             000000D6  SQRT_6             
000000D7  SQRT_7             000000D8  SQRT_8             000000D9  SQRT_9             
000000DA  SQRT_A             000000DB  SQRT_B             000000DC  SQRT_C             
000000DD  SQRT_D             000000DE  SQRT_E             000000DF  SQRT_F             
0000010B  START              0000006D  STATUS             00000015  SWAPDMABYTES       
00000010  SYSMEMSTART        0000001A  THREADS            00000067  TIMER              
00000011  TOTALTRI           00000020  TRIANGLES          00000018  TRIDIVXN           
0000012A  TRILOOP            0000012E  WAIT0              00000133  WAIT1              
0000013E  WAIT2              00000014  WORK_1             00000015  WORK_2             
00000016  WORK_3             00000017  WORK_4             00000120  XFERLOOP           
0000010E  XFORM_XYZ          
