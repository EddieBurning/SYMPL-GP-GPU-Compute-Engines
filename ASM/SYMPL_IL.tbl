; Cross-32 instruction table for SYMPL RISC, Coarse-Grained Scheduler (CGS) and GP-GPU Shader cores.  
; version 2.61   January 18, 2016 
; Author:  Jerry D. Harthcock
; Copyright (C) 2014-2016.  All rights reserved, without prejudice.
; A copy of Cross-32 can be purchased from
; Data-Sync Engineering at: http://www.cdadapter.com/cross32.htm  sales@datasynceng.com
; A copy of the Cross-32 manual can be viewed online here:  http://www.cdadapter.com/download/cross32.pdf
; This version does not include support for soft-scheduling feature.  If you need that capability
; contact the author of this table at: SYMPL.gpu@gmail.com
;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
;//                                                                                                                //
;//             SYMPL 32-BIT RISC, COARSE-GRAINED SCHEDULER (CGS) and GP-GPU SHADER IP CORES                       //
;//                              Evaluation and Product Development License                                        //
;//                                                                                                                //
;// Provided that you comply with all the terms and conditions set forth herein, Jerry D. Harthcock ("licensor"),  //
;// the original author and exclusive copyright owner of these SYMPL 32-BIT RISC, COARSE-GRAINED SCHEDULER (CGS)   //
;// and GP-GPU SHADER Verilog RTL IP cores and related development software ("this IP")  hereby grants             //
;// to recipient of this IP ("licensee"), a world-wide, paid-up, non-exclusive license to implement this IP in     //
;// Xilinx, Altera, MicroSemi or Lattice Semiconductor brand FPGAs only and used for the purposes of evaluation,   //
;// education, and development of end products and related development tools only.  Furthermore, limited to the    //
;// the purposes of prototyping, evaluation, characterization and testing of their implementation in a hard,       //
;// custom or semi-custom ASIC, any university or institution of higher education may have their implementation of //
;// this IP produced for said limited purposes at any foundary of their choosing provided that such prototypes do  //
;// not ever wind up in commercial circulation with such license extending to said foundary and is in connection   //
;// with said academic pursuit and under the supervision of said university or institution of higher education.    //
;//                                                                                                                //
;// Any customization, modification, or derivative work of this IP must include an exact copy of this license      //
;// and original copyright notice at the very top of each source file and derived netlist, and, in the case of     //
;// binaries, a printed copy of this license and/or a text format copy in a separate file distributed with said    //
;// netlists or binary files having the file name, "LICENSE.txt".  You, the licensee, also agree not to remove     //
;// any copyright notices from any source file covered under this Evaluation and Product Development License.      //
;//                                                                                                                //
;// LICENSOR DOES NOT WARRANT OR GUARANTEE THAT YOUR USE OF THIS IP WILL NOT INFRINGE THE RIGHTS OF OTHERS OR      //
;// THAT IT IS SUITABLE OR FIT FOR ANY PURPOSE AND THAT YOU, THE LICENSEE, AGREE TO HOLD LICENSOR HARMLESS FROM    //
;// ANY CLAIM BROUGHT BY YOU OR ANY THIRD PARTY FOR YOUR SUCH USE.                                                 //
;//                                                                                                                //
;// Licensor reserves all his rights without prejudice, including, but in no way limited to, the right to change   //
;// or modify the terms and conditions of this Evaluation and Product Development License anytime without notice   //
;// of any kind to anyone. By using this IP for any purpose, you agree to all the terms and conditions set forth   //
;// in this Evaluation and Product Development License.                                                            //
;//                                                                                                                //
;// This Evaluation and Product Development License does not include the right to sell products that incorporate   //
;// this IP, any IP derived from this IP.  If you would like to obtain such a license, please contact Licensor.    //                                                                                          //
;//                                                                                                                //
;// Licensor can be contacted at:  SYMPL.gpu@gmail.com                                                             //
;//                                                                                                                //
;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

;---------------------------------
;Register/Flag definition section
;---------------------------------
1, "LEFT", "LSL", "ASL", "ROL", "RIGHT", "LSR", "ASR", "ROR"   ;type of SHFT
2, "Z", "C", "N", "V", "LOCKED","DONE","INV","DIVBY0","OVFL","UNFL","NXACT","ALTINV","ALTDVBY0","ALTOVFL","ALTUNFL","ALTNXACT","DALTINV","DALTDVBY0","DALTOVFL","DALTUNFL","DALTNXACT","IRQEN","IRQ","!$","%!","*^","&@","%$*","%@!","Z|V","NEVER","ALWAYS"
6, "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16"
7, "LPCNT0", "LPCNT1"
;8, "MOV", "AND", "OR", "XOR", "*&%", "^$#", "ADD", "ADDC", "SUB", "SUBB", "MUL", "SIN", "COS", "TAN", "COT", "RCP"
;           1111111111222222222233                       
; 01234567890123456789012345678901
; 00000000000000000000000000000000

;---------------------------
;Operand definition section
;---------------------------
*
;NUM	START	LENGTH   EXP    LOW    HIGH   ;COMMENT
1,	      8,	   8,     #,     0,    0xFF   ;direct destination
2,	     16,       8,     #,     0,    0xFF   ;direct SrcA
3,       24,       8,     #,     0,    0xFF   ;direct SrcB
4,        8,       8,     #,   0x70,   0x73   ;indirect destination  
5,       16,       8,     #,   0x70,   0x73   ;indirect SrcA  
6,       24,       8,     #,   0x70,   0x73   ;indirect SrcB 
7,       16,      16,     #,   0x0000, 0xFFFF ;immediate MOV #16-bits or @16-bits {srcA,srcB} combined (applies to MOV only)
8,       24,       8,     #,   0x00,   0xFF   ;immediate SrcB is #8-bits 
9,       19,       5,     #,      0,   0x1f   ;conditional branch as per condition mneumonics "@2" above
10,       8,       8,   {#-$}, $-127,  $+128  ;relative branch
14,      28,       4,    @6,    0x0,   0xF    ;shift amount, 0x0 is code for one shift, 0xF is code for 16 shifts as per "@6" above
15,      24,       4,    @1,    0x0,   0x7    ;type of shift as per "@1" above
16,      31,       1,    @7,    0x0,   0x1    ;DBNZ as per "@7" above
17,      21,      11,     #,   0x0000, 0xFFFF ;RPT immediate
18,      20,       4,     #,      0,   0xf    ;conditional branch as per condition mneumonics "@2" above (for 16-bits)
19,      21,       3,     #,      0,   0x7    ;conditional branch as per condition mneumonics "@2" above (for 8-bits)
20,      19,       5,    @2,      0,   0x1f   ;conditional branch as per condition mneumonics "@2" above
30,       4,       4,     #,      0,   0xf    ;operation

;-------------------------
;addressing modes section
;-------------------------
*                                     
1,#{17}^30000000:                               ;Repeat RPT (RPT is alias of MOV)
2,[{5}]^00000400:                               ;use contents of ARn as repeat value
3,[{5}]++^00000800:                             ;use contents of ARn as repeat value then post-increment ARn
4,[{5}]^--00000C00:                             ;use contents of ARn as repeat value then post-decrement ARn

5,{10},{16}^00000F66:                           ;DBNZ (DBNZ is alias of BTBS)

6,{10},{20}^0000006D:                           ;BCND  (note: BCND is alias of BTBS)

7,{1},{2},{15},{14}^00000000:                   ;SHFT 
8,{1},*{5},{15},{14}^00000400:
9,{1},*{5}++,{15},{14}^00000800:
10,{1},*{5}--,{15},{14}^00000C00:
11,*{4},{2},{15},{14}^00040000:
12,*{4},*{5},{15},{14}^00040400:
13,*{4},*{5}--,{15},{14}^00040C00:
14,*{4},*{5}++,{15},{14}^00040800:
15,*{4}++,{2},{15},{14}^00080000:
16,*{4}++,*{5},{15},{14}^00080400:
17,*{4}++,*{5}++,{15},{14}^00080800:
18,*{4}++,*{5}--,{15},{14}^00080C00:
19,*{4}--,{2},{15},{14}^000C0000:
20,*{4}--,*{5},{15},{14}^000C0400:
21,*{4}--,*{5}++,{15},{14}^000C0800:
22,*{4}--,*{5}--,{15},{14}^000C0C00:
23,{1},@{2},{15},{14}^20000000:
24,*{4},@{2},{15},{14}^20040000:
25,*{4}++,@{2},{15},{14}^20080000:
26,*{4}--,@{2},{15},{14}^200C0000:

27,*SP--,{2},{15},{14}^006B0000:                ;shift with *SP-- as destination
28,*SP--,*{5},{15},{14}^006B0400:
29,*SP--,*{5}++,{15},{14}^006B0800:
30,*SP--,*{5}--,{15},{14}^006B0C00:
31,*SP--,*SP++,{15},{14}^006B6A00:
32,*SP--,*SP,{15},{14}^006B6800:            

33,{10},{9},{3}^00000000:                       ;BTBS BTBC (32 bits)
34,{10},{9},*{6}^00000004:
35,{10},{9},*{6}++^00000008:
36,{10},{9},*{6}--^0000000C:
37,*{4},{9},{3}^00040000:         

38,*{4},{9},*{6}^00040004:
39,*{4}++,{9},*{6}++^00080008:
40,*{4}++,{9},*{6}--^0008000C:
41,*{4}--,{9},*{6}++^000C0008:
42,*{4}--,{9},*{6}--^000C000C:

43,{10},{18},{3}^00000000:                      ;BTBS BTBC (16 bits)
44,{10},{18},*{6}^00000004:
45,{10},{18},*{6}++^00000008:
46,{10},{18},*{6}--^0000000C:
47,*{4},{18},{3}^00040000:           

48,*{4},{18},*{6}^00040004:
49,*{4}++,{18},*{6}++^00080008:
50,*{4}++,{18},*{6}--^0008000C:
51,*{4}--,{18},*{6}++^000C0008:
52,*{4}--,{18},*{6}--^000C000C:

53,{10},{19},{3}^00000000:                      ;BTBS BTBC (8 bits)
54,{10},{19},*{6}^00000004:
55,{10},{19},*{6}++^00000008:
56,{10},{19},*{6}--^0000000C:
57,*{4},{19},{3}^00040000:         

58,*{4},{19},*{6}^00040004:
59,*{4}++,{19},*{6}++^00080008:
60,*{4}++,{19},*{6}--^0008000C:
61,*{4}--,{19},*{6}++^000C0008:
62,*{4}--,{19},*{6}--^000C000C:                 ;BTBS/C end

63,{1},#{7}^30000000:                           ;MOV#16

64,{1},{2}^00000000:                            ;operandA only for MOV, AND, OR, XOR, ADD, ADC, SUB, SUBB, MUL
65,{1},*{5}^00000400:
66,{1},*{5}++^00000800:
67,{1},*{5}--^00000C00:
68,*{4},{2}^00040000:
69,*{4},*{5}^00040400:
70,*{4},*{5}--^00040C00:
71,*{4},*{5}++^00040800:
72,*{4}++,{2}^00080000:
73,*{4}++,*{5}^00080400:
74,*{4}++,*{5}++^00080800:
75,*{4}++,*{5}--^00080C00:
76,*{4}--,{2}^000C0000:
77,*{4}--,*{5}^000C0400:
78,*{4}--,*{5}++^000C0800:
79,*{4}--,*{5}--^000C0C00:

80,{1},@{7}^20000000:          
81,*{4},@{7}^20040000:
82,*{4}++,@{7}^20080000:
83,*{4}--,@{7}^200C0000:
84,*{4},#{7}^30040000:
85,*{4}++,#{7}^30080000:
86,*{4}--,#{7}^300C0000:     

87,{1},*SP^00006800:                            ;peek operandA from TOS (SP unaffected by the read-side of the operations)      
88,*SP--,*SP^006B6800:                                                                                           
89,*{4},*SP^00046800:                                                                                            
90,*{4}++,*SP^00086800:                                                                                          
91,*{4}--,*SP^000C6800:    
                                                                                      
92,{1},*SP++^00006A00:                          ;pop operandA (single-operand)                                                
93,*SP--,*SP++^006B6A00:                                                                                         
94,*{4},*SP++^00046A00:                                                                                          
95,*{4}++,*SP++^00086A00:                                                                                        
96,*{4}--,*SP++^000C6A00:  
                                                                                      
97,*SP--,{2}^006B0000:                          ;push  (single-operand)                                                       
98,*SP--,#{7}^306B0000:                                                                                          
99,*SP--,@7^206B0000:                                                                                            
100,*SP--,*{5}^006B0400:                                                                                          
101,*SP--,*{5}++^006B0800:                                                                                        
102,*SP--,*{5}--^006B0C00:                                                                                        
103,*SP--,*SP^006B6800:                                                                                           
104,*SP--,*SP++^006B6A00:            
                                                                             
105,{1},{2},{3}^00000000:                       ;dual-operand for MOV, AND, OR, XOR, ADD, ADC, SUB, SUBB, MUL
106,{1},*{5},{3}^00000400:
107,{1},*{5}++,{3}^00000800:
108,{1},*{5}--,{3}^00000C00:
109,{1},{2},*{6}^00000004:
110,{1},{2},*{6}++^00000008:
111,{1},{2},*{6}++^0000000C:
112,{1},*{5},*{6}^00000404:
113,{1},*{5},*{6}++^00000408:
114,{1},*{5},*{6}--^0000040C:
115,{1},*{5}++,*{6}^00000804:
116,{1},*{5}++,*{6}++^00000808:
117,{1},*{5}++,*{6}--^0000080C:
118,{1},*{5}--,*{6}^00000C04:
119,{1},*{5}--,*{6}++^00000C08:
120,{1},*{5}--,*{6}--^00000C0C:
121,*{4},{2},{3}^00040000:
122,*{4}++,{2},{3}^00080000:
123,*{4}--,{2},{3}^000C0000:
124,*{4},*{5},{3}^00040400:
125,*{4},*{5}++,{3}^00040800:
126,*{4},*{5}--,{3}^00040C00:
127,*{4}++,*{5},{3}^00080400:
128,*{4}++,*{5}++,{3}^00080800:
129,*{4}++,*{5}--,{3}^00080C00:
130,*{4}--,*{5},{3}^000C0400:
131,*{4}--,*{5}++,{3}^000C0800:
132,*{4}--,*{5}--,{3}^000C0C00:
133,*{4},{2},*{6}^00040004:
134,*{4},{2},*{6}++^00040008:
135,*{4},{2},*{6}--^0004000C:
136,*{4}++,{2},*{6}^00080004:
137,*{4}++,{2},*{6}++^00080008:
138,*{4}++,{2},*{6}--^0008000C:
139,*{4}--,{2},*{6}^000C0004:
140,*{4}--,{2},*{6}++^000C0008:
141,*{4}--,{2},*{6}--^000C000C:
142,*{4},*{5},*{6}^00040404:
143,*{4},*{5},*{6}++^00040408:
144,*{4},*{5},*{6}--^0004040C:
145,*{4},*{5}++,*{6}^00040804:
146,*{4},*{5}++,*{6}++^00040808:
147,*{4},*{5}++,*{6}--^0004080C:
148,*{4},*{5}--,*{6}^00040C04:
149,*{4},*{5}--,*{6}++^00040C08:
150,*{4},*{5}--,*{6}--^00040C0C:
151,*{4}++,*{5},*{6}^00080404:
152,*{4}++,*{5},*{6}++^00080408:
153,*{4}++,*{5},*{6}--^0008040C:
154,*{4}++,*{5}++,*{6}^00080804:
155,*{4}++,*{5}++,*{6}++^00080808:
156,*{4}++,*{5}++,*{6}--^0008080C:
157,*{4}++,*{5}--,*{6}^00080C04:
158,*{4}++,*{5}--,*{6}++^00080C08:
159,*{4}++,*{5}--,*{6}--^00080C0C:
160,*{4}--,*{5},*{6}^000C0404:
161,*{4}--,*{5},*{6}++^000C0408:
162,*{4}--,*{5},*{6}--^000C040C:
163,*{4}--,*{5}++,*{6}^000C0804:
164,*{4}--,*{5}++,*{6}++^000C0808:
165,*{4}--,*{5}++,*{6}--^000C080C:          
166,*{4}--,*{5}--,*{6}^000C0C04:
167,*{4}--,*{5}--,*{6}++^000C0C08:
168,*{4}--,*{5}--,*{6}--^000C0C0C:

169,*{4},@{2},*{6}^20040004:               
170,*{4},@{2},*{6}++^20040008:
171,*{4},@{2},*{6}--^2004000C:
172,*{4}++,@{2},*{6}^20080004:
173,*{4}++,@{2},*{6}++^20080008:
174,*{4}++,@{2},*{6}--^2008000C:
175,*{4}--,@{2},*{6}^200C0004:
176,*{4}--,@{2},*{6}++^200C0008:
177,*{4}--,@{2},*{6}--^200C000C:

178,{1},@{2},*{6}^20000004:                
179,{1},@{2},*{6}++^20000008:
180,{1},@{2},*{6}--^2000000C:

181,*{4},@{2},{3}^20040000:                
182,*{4}++,@{2},{3}^20080000:    
183,*{4}--,@{2},{3}^200C0000:
184,*{4},{2},#{8}^10040000:
185,*{4}++,{2},#{8}^10080000:
186,*{4}--,{2},#{8}^100C0000:
187,*{4},*{5},#{8}^10040400:
188,*{4},*{5}++,#{8}^10040800:
189,*{4},*{5}--,#{8}^10040C00:
190,*{4}++,*{5},#{8}^10080400:
191,*{4}++,*{5}++,#{8}^10080800:
192,*{4}++,*{5}--,#{8}^10080C00:
193,*{4}--,*{5},#{8}^100C0400:
194,*{4}--,*{5}++,#{8}^100C0800:
195,*{4}--,*{5}--,#{8}^100C0C00:
196,{1},{2},#{8}^10000000:
197,{1},*{5},#{8}^10000400:
198,{1},*{5}++,#{8}^10000800:
199,{1},*{5}--,#{8}^10000C00:
200,{1},@{2},{3}^20000000:

201,*SP--,{2},{3}^006B0000:                     ;push  ("result of" dual-operand)
202,*SP--,{2},*{6}^006B0004:
203,*SP--,{2},*{6}++^006B0008:
204,*SP--,{2},*{6}--^006B000C:
205,*SP--,{2},#{8}^106B0000:

206,*SP--,*{5},*{6}^006B0404:         
207,*SP--,*{5},*{6}++^006B0408:
208,*SP--,*{5},*{6}--^006B040C:
209,*SP--,*{5}++,*{6}^006B0804:
210,*SP--,*{5}++,*{6}++^006B0808:
211,*SP--,*{5}++,*{6}--^006B080C:
212,*SP--,*{5}--,*{6}^006B0C04:
213,*SP--,*{5}--,*{6}++^006B0C08:
214,*SP--,*{5}--,*{6}--^006B0C0C:

215,*SP--,*{5},{3}^006B0400:             
216,*SP--,*{5}++,{3}^006B0800:
217,*SP--,*{5}--,{3}^006B0C00:

218,*SP--,*{5},#{8}^106B0400:            
219,*SP--,*{5}++,#{8}^106B0800:
220,*SP--,*{5}--,#{8}^106B0C00:

221,*SP--,@2,{3}^206B0000:               
222,*SP--,@2,*{6}^206B0004:
223,*SP--,@2,*{6}++^206B0008:
224,*SP--,@2,*{6}--^206B000C:

225,*SP--,*SP++,{3}^006B6A00:           
226,*SP--,*SP++,*{6}^006B6A04:
227,*SP--,*SP++,*{6}++^006B6A08:
228,*SP--,*SP++,*{6}--^006B6A0C:
229,*SP--,*SP++,#{8}^106B6A00:

230,*SP--,*SP,{3}^006B6800:             
231,*SP--,*SP,*{6}^006B6804:
232,*SP--,*SP,*{6}++^006B6808:
233,*SP--,*SP,*{6}--^006B680C:
234,*SP--,*SP,#{8}^106B6800:      
      
235,*SP--,{2},*SP++^006B006A:           
236,*SP--,*{5},*SP++^006B046A:
237,*SP--,*{5}++,*SP++^006B086A:
238,*SP--,*{5}--,*SP++^006B0C6A:
239,*SP--,@{2},*SP++^206B006A:

240,*SP--,{2},*SP^006B0068:             
241,*SP--,*{5},*SP^006B0468:
242,*SP--,*{5}++,*SP^006B0868:
243,*SP--,*{5}--,*SP^006B0C68:
244,*SP--,@{2},*SP^206B0068:

245,{1},*SP++,{3}^00006A00:                     ;pop operandA (dual-operand)
246,{1},*SP++,*{6}^00006A04:
247,{1},*SP++,*{6}++^00006A08:
248,{1},*SP++,*{6}--^00006A0C:
249,{1},*SP++,#{8}^10006A00:

250,*{4},*SP++,{3}^00046A00:            
251,*{4},*SP++,*{6}^00046A04:
252,*{4},*SP++,*{6}++^00046A08:
253,*{4},*SP++,*{6}--^00046A0C:
254,*{4},*SP++,#{8}^10046A00:

255,*{4}++,*SP++,{3}^00086A00:           
256,*{4}++,*SP++,*{6}^00086A04:
257,*{4}++,*SP++,*{6}++^00086A08:
258,*{4}++,*SP++,*{6}--^00086A0C:
259,*{4}++,*SP++,#{8}^10086A00:

260,*{4}--,*SP++,{3}^000C6A00:         
261,*{4}--,*SP++,*{6}^000C6A04:
262,*{4}--,*SP++,*{6}++^000C6A08:
263,*{4}--,*SP++,*{6}--^000C6A0C:
264,*{4}--,*SP++,#{8}^100C6A00:

265,{1},{2},*SP++^0000006A:                     ;pop operandB                          
266,{1},*{5},*SP++^0000046A:                                                   
267,{1},*{5}++,*SP++^0000086A:                                                   
268,{1},*{5}--,*SP++^00000C6A:                                                   
269,{1},@{2},*SP++^2000006A:        
                                           
270,*{4},{2},*SP++^0004006A:                                                   
271,*{4},*{5},*SP++^0004046A:                                                   
272,*{4},*{5}++,*SP++^0004086A:                                                   
273,*{4},*{5}--,*SP++^00040C6A:                                                   
274,*{4},@{2},*SP++^2004006A:        
                                           
275,*{4}++,{2},*SP++^0008006A:                                                   
276,*{4}++,*{5},*SP++^0008046A:                                                   
277,*{4}++,*{5}++,*SP++^0008086A:                                                   
278,*{4}++,*{5}--,*SP++^00080C6A:                                                   
279,*{4}++,@{2},*SP++^2008006A:    
                                               
280,*{4}--,{2},*SP++^000C006A:                                                   
281,*{4}--,*{5},*SP++^000C046A:                                                   
282,*{4}--,*{5}++,*SP++^000C086A:                                                   
283,*{4}--,*{5}--,*SP++^000C0C6A:                                                   
284,*{4}--,@{2},*SP++^200C006A:  
                                                 
285,{1},*SP,{3}^00006800:                       ;peek operandA from TOS (SP unaffected by the read-side of the operations)
286,{1},*SP,*{6}^00006804:
287,{1},*SP,*{6}++^00006808:
288,{1},*SP,*{6}--^0000680C:

289,{1},*SP,#{8}^10006800:

290,*{4},*SP,{3}^00046800:        
291,*{4},*SP,*{6}^00046804:
292,*{4},*SP,*{6}++^00046808:
293,*{4},*SP,*{6}--^0004680C:
294,*{4},*SP,#{8}^10046800:

295,*{4}++,*SP,{3}^00086800:      
296,*{4}++,*SP,*{6}^00086804:
297,*{4}++,*SP,*{6}++^00086808:
298,*{4}++,*SP,*{6}--^0008680C:
299,*{4}++,*SP,#{8}^10086800:

300,*{4}--,*SP,{3}^000C6800:      
301,*{4}--,*SP,*{6}^000C6804:
302,*{4}--,*SP,*{6}++^000C6808:
303,*{4}--,*SP,*{6}--^000C680C:
304,*{4}--,*SP,#{8}^100C6800:

305,{1},{2},*SP^00000068:                       ;peek operandB from TOS (SP unaffected by the read-side of the operations)
306,{1},*{5},*SP^00000468:                        
307,{1},*{5}++,*SP^00000868:                        
308,{1},*{5}--,*SP^00000C68:                        
309,{1},@{2},*SP^20000068:        
                
310,*{4},{2},*SP^00040068:                        
311,*{4},*{5},*SP^00040468:                        
312,*{4},*{5}++,*SP^00040868:                        
313,*{4},*{5}--,*SP^00040C68:                        
314,*{4},@{2},*SP^20040068:       
                 
315,*{4}++,{2},*SP^00080068:                        
316,*{4}++,*{5},*SP^00080468:                        
317,*{4}++,*{5}++,*SP^00080868:                        
318,*{4}++,*{5}--,*SP^00080C68:                        
319,*{4}++,@{2},*SP^20080068:      
                  
320,*{4}--,{2},*SP^000C0068:                        
321,*{4}--,*{5},*SP^000C0468:                        
322,*{4}--,*{5}++,*SP^000C0868:                        
323,*{4}--,*{5}--,*SP^000C0C68:                        
324,*{4}--,@{2},*SP^200C0068:                        

;-------------------------------------------------------------
; SYMPL INTERMEDIATE LANGUAGE (IL) addressing modes section
;-------------------------------------------------------------

325,{1}=#{7}^30000000:                          ;MOV#16

326,{1}={2}^00000000:                           ;operandA only for MOV, AND, OR, XOR, ADD, ADC, SUB, SUBB, MUL
327,{1}=*{5}^00000400:
328,{1}=*{5}++^00000800:
329,{1}=*{5}--^00000C00:
330,*{4}={2}^00040000:
331,*{4}=*{5}^00040400:
332,*{4}=*{5}--^00040C00:
333,*{4}=*{5}++^00040800:
334,*{4}++={2}^00080000:
335,*{4}++=*{5}^00080400:
336,*{4}++=*{5}++^00080800:
337,*{4}++=*{5}--^00080C00:
338,*{4}--={2}^000C0000:
339,*{4}--=*{5}^000C0400:
340,*{4}--=*{5}++^000C0800:
341,*{4}--=*{5}--^000C0C00:

342,{1}=@{7}^20000000:          
343,*{4}=@{7}^20040000:
344,*{4}++=@{7}^20080000:
345,*{4}--=@{7}^200C0000:
346,*{4}=#{7}^30040000:
347,*{4}++=#{7}^30080000:
348,*{4}--=#{7}^300C0000:     

349,{1}=*SP^00006900:                           ;peek operandA from TOS (SP unaffected by the read-side of the operations)
      
350,*SP--=*SP^006B6900:                                                                                           
351,*{4}=*SP^00046900:                                                                                            
352,*{4}++=*SP^00086900:                                                                                          
353,*{4}--=*SP^000C6900:      
                                                                                    
354,{1}=*SP++^00006A00:                         ;pop operandA (single-operand)                                                
355,*SP--=*SP++^006B6A00:                                                                                         
356,*{4}=*SP++^00046A00:                                                                                          
357,*{4}++=*SP++^00086A00:                                                                                        
358,*{4}--=*SP++^000C6A00:   
                                                                                     
359,*SP--={2}^006B0000:                         ;push  (single-operand)                                                       
360,*SP--=#{7}^306B0000:                                                                                          
361,*SP--=@7^206B0000:                                                                                            
362,*SP--=*{5}^006B0400:                                                                                          
363,*SP--=*{5}++^006B0800:                                                                                        
364,*SP--=*{5}--^006B0C00:                                                                                        
365,*SP--=*SP^006B6900:                                                                                           
366,*SP--=*SP++^006B6A00:    

367,{1}={30}:#{7}^30000000:                     ;MOV#16

368,{1}={30}:({2})^00000000:                    ;operandA only for MOV, AND, OR, XOR, ADD, ADC, SUB, SUBB, MUL, SIN, COS, TAN, COT, RCP
369,{1}={30}:(*{5})^00000400:                  
370,{1}={30}:(*{5}++)^00000800:                
371,{1}={30}:(*{5}--)^00000C00:                
372,*{4}={30}:({2})^00040000:
373,*{4}={30}:(*{5})^00040400:
374,*{4}={30}:(*{5}--)^00040C00:
375,*{4}={30}:(*{5}++)^00040800:
376,*{4}++={30}:({2})^00080000:
377,*{4}++={30}:(*{5})^00080400:
378,*{4}++={30}:(*{5}++)^00080800:
379,*{4}++={30}:(*{5}--)^00080C00:
380,*{4}--={30}:({2})^000C0000:
381,*{4}--={30}:(*{5})^000C0400:
382,*{4}--={30}:(*{5}++)^000C0800:
383,*{4}--={30}:(*{5}--)^000C0C00:

384,{1}={30}:(@{7})^20000000:          
385,*{4}={30}:(@{7})^20040000:
386,*{4}++={30}:(@{7})^20080000:
387,*{4}--={30}:(@{7})^200C0000:
388,*{4}={30}:(#{7})^30040000:
389,*{4}++={30}:(#{7})^30080000:
390,*{4}--={30}:(#{7})^300C0000:     

391,{1}={30}:(*SP)^00006900:                    ;peek operandA from TOS (SP unaffected by the read-side of the operations)      
392,*SP--={30}:(*SP)^006B6900:                                                                                           
393,*{4}={30}:(*SP)^00046900:                                                                                            
394,*{4}++={30}:(*SP)^00086900:                                                                                          
395,*{4}--={30}:(*SP)^000C6900:        
                                                                                  
396,{1}={30}:(*SP++)^00006A00:                  ;pop operandA (single-operand)                                                
397,*SP--={30}:(*SP++)^006B6A00:                                                                                         
398,*{4}={30}:(*SP++)^00046A00:                                                                                          
399,*{4}++={30}:(*SP++)^00086A00:                                                                                        
400,*{4}--={30}:(*SP++)^000C6A00:   
                                                                                     
401,*SP--={30}:({2})^006B0000:                  ;push  (single-operand)                                                       
402,*SP--={30}:(#{7})^306B0000:                                                                                          
403,*SP--={30}:(@7)^206B0000:                                                                                            
404,*SP--={30}:(*{5})^006B0400:                                                                                          
405,*SP--={30}:(*{5}++)^006B0800:                                                                                        
406,*SP--={30}:(*{5}--)^006B0C00:                                                                                        
407,*SP--={30}:(*SP)^006B6900:                                                                                           
408,*SP--={30}:(*SP++)^006B6A00:    
        
409,{1}={30}:({2},{3})^00000000:                ;dual-operand for MOV, AND, OR, XOR, ADD, ADC, SUB, SUBB, MUL
410,{1}={30}:(*{5},{3})^00000400:
411,{1}={30}:(*{5}++,{3})^00000800:
412,{1}={30}:(*{5}--,{3})^00000C00:
413,{1}={30}:({2},*{6})^00000004:
414,{1}={30}:({2},*{6}++)^00000008:
415,{1}={30}:({2},*{6}++)^0000000C:
416,{1}={30}:(*{5},*{6})^00000404:
417,{1}={30}:(*{5},*{6}++)^00000408:
418,{1}={30}:(*{5},*{6}--)^0000040C:
419,{1}={30}:(*{5}++,*{6})^00000804:
420,{1}={30}:(*{5}++,*{6}++)^00000808:
421,{1}={30}:(*{5}++,*{6}--)^0000080C:
422,{1}={30}:(*{5}--,*{6})^00000C04:
423,{1}={30}:(*{5}--,*{6}++)^00000C08:
424,{1}={30}:(*{5}--,*{6}--)^00000C0C:
425,*{4}={30}:({2},{3})^00040000:
426,*{4}++={30}:({2},{3})^00080000:
427,*{4}--={30}:({2},{3})^000C0000:
428,*{4}={30}:(*{5},{3})^00040400:
429,*{4}={30}:(*{5}++,{3})^00040800:
430,*{4}={30}:(*{5}--,{3})^00040C00:
431,*{4}++={30}:(*{5},{3})^00080400:
432,*{4}++={30}:(*{5}++,{3})^00080800:
433,*{4}++={30}:(*{5}--,{3})^00080C00:
434,*{4}--={30}:(*{5},{3})^000C0400:
435,*{4}--={30}:(*{5}++,{3})^000C0800:
436,*{4}--={30}:(*{5}--,{3})^000C0C00:
437,*{4}={30}:({2},*{6})^00040004:
438,*{4}={30}:({2},*{6}++)^00040008:
439,*{4}={30}:({2},*{6}--)^0004000C:
440,*{4}++={30}:({2},*{6})^00080004:
441,*{4}++={30}:({2},*{6}++)^00080008:
442,*{4}++={30}:({2},*{6}--)^0008000C:
443,*{4}--={30}:({2},*{6})^000C0004:
444,*{4}--={30}:({2},*{6}++)^000C0008:
445,*{4}--={30}:({2},*{6}--)^000C000C:
446,*{4}={30}:(*{5},*{6})^00040404:
447,*{4}={30}:(*{5},*{6}++)^00040408:
448,*{4}={30}:(*{5},*{6}--)^0004040C:
449,*{4}={30}:(*{5}++,*{6})^00040804:
450,*{4}={30}:(*{5}++,*{6}++)^00040808:
451,*{4}={30}:(*{5}++,*{6}--)^0004080C:
452,*{4}={30}:(*{5}--,*{6})^00040C04:
453,*{4}={30}:(*{5}--,*{6}++)^00040C08:
454,*{4}={30}:(*{5}--,*{6}--)^00040C0C:
455,*{4}++={30}:(*{5},*{6})^00080404:
456,*{4}++={30}:(*{5},*{6}++)^00080408:
457,*{4}++={30}:(*{5},*{6}--)^0008040C:
458,*{4}++={30}:(*{5}++,*{6})^00080804:
459,*{4}++={30}:(*{5}++,*{6}++)^00080808:
460,*{4}++={30}:(*{5}++,*{6}--)^0008080C:
461,*{4}++={30}:(*{5}--,*{6})^00080C04:
462,*{4}++={30}:(*{5}--,*{6}++)^00080C08:
463,*{4}++={30}:(*{5}--,*{6}--)^00080C0C:
464,*{4}--={30}:(*{5},*{6})^000C0404:
465,*{4}--={30}:(*{5},*{6}++)^000C0408:
466,*{4}--={30}:(*{5},*{6}--)^000C040C:
467,*{4}--={30}:(*{5}++,*{6})^000C0804:
468,*{4}--={30}:(*{5}++,*{6}++)^000C0808:
469,*{4}--={30}:(*{5}++,*{6}--)^000C080C:          
470,*{4}--={30}:(*{5}--,*{6})^000C0C04:
471,*{4}--={30}:(*{5}--,*{6}++)^000C0C08:
472,*{4}--={30}:(*{5}--,*{6}--)^000C0C0C:

473,*{4}={30}:(@{2},*{6})^20040004:               
474,*{4}={30}:(@{2},*{6}++)^20040008:
475,*{4}={30}:(@{2},*{6}--)^2004000C:
476,*{4}++={30}:(@{2},*{6})^20080004:
477,*{4}++={30}:(@{2},*{6}++)^20080008:
478,*{4}++={30}:(@{2},*{6}--)^2008000C:
479,*{4}--={30}:(@{2},*{6})^200C0004:
480,*{4}--={30}:(@{2},*{6}++)^200C0008:
481,*{4}--={30}:(@{2},*{6}--)^200C000C:

482,{1}={30}:(@{2},*{6})^20000004:                
483,{1}={30}:(@{2},*{6}++)^20000008:
484,{1}={30}:(@{2},*{6}--)^2000000C:

485,*{4}={30}:(@{2},{3})^20040000:                
486,*{4}++={30}:(@{2},{3})^20080000:    
487,*{4}--={30}:(@{2},{3})^200C0000:
488,*{4}={30}:({2},#{8})^10040000:
489,*{4}++={30}:({2},#{8})^10080000:
490,*{4}--={30}:({2},#{8})^100C0000:
491,*{4}={30}:(*{5},#{8})^10040400:
492,*{4}={30}:(*{5}++,#{8})^10040800:
493,*{4}={30}:(*{5}--,#{8})^10040C00:
494,*{4}++={30}:(*{5},#{8})^10080400:
495,*{4}++={30}:(*{5}++,#{8})^10080800:
496,*{4}++={30}:(*{5}--,#{8})^10080C00:
497,*{4}--={30}:(*{5},#{8})^100C0400:
498,*{4}--={30}:(*{5}++,#{8})^100C0800:
499,*{4}--={30}:(*{5}--,#{8})^100C0C00:

500,{1}={30}:({2},#{8})^10000000:
501,{1}={30}:(*{5},#{8})^10000400:
502,{1}={30}:(*{5}++,#{8})^10000800:
503,{1}={30}:(*{5}--,#{8})^10000C00:
504,{1}={30}:(@{2},{3})^20000000:

505,*SP--={30}:({2},{3}))^006B0000:             ;push  ("result of" dual-operand)
506,*SP--={30}:({2},*{6})^006B0004:
507,*SP--={30}:({2},*{6}++)^006B0008:
508,*SP--={30}:({2},*{6}--)^006B000C:
509,*SP--={30}:({2},#{8})^106B0000:
510,*SP--={30}:(*{5},*{6})^006B0404:         
511,*SP--={30}:(*{5},*{6}++)^006B0408:
512,*SP--={30}:(*{5},*{6}--)^006B040C:
513,*SP--={30}:(*{5}++,*{6})^006B0804:
514,*SP--={30}:(*{5}++,*{6}++)^006B0808:
515,*SP--={30}:(*{5}++,*{6}--)^006B080C:
516,*SP--={30}:(*{5}--,*{6})^006B0C04:
517,*SP--={30}:(*{5}--,*{6}++)^006B0C08:
518,*SP--={30}:(*{5}--,*{6}--)^006B0C0C:

519,*SP--={30}:(*{5},{3})^006B0400:             
520,*SP--={30}:(*{5}++,{3})^006B0800:
521,*SP--={30}:(*{5}--,{3})^006B0C00:

522,*SP--={30}:(*{5},#{8})^106B0400:            
523,*SP--={30}:(*{5}++,#{8})^106B0800:
524,*SP--={30}:(*{5}--,#{8})^106B0C00:
525,*SP--={30}:(@2,{3})^206B0000:             
  ;
526,*SP--={30}:(@2,*{6})^206B0004:
527,*SP--={30}:(@2,*{6}++)^206B0008:
528,*SP--={30}:(@2,*{6}--)^206B000C:

529,*SP--={30}:(*SP++,{3})^006B6A00:           
530,*SP--={30}:(*SP++,*{6})^006B6A04:
531,*SP--={30}:(*SP++,*{6}++)^006B6A08:
532,*SP--={30}:(*SP++,*{6}--)^006B6A0C:
533,*SP--={30}:(*SP++,#{8})^106B6A00:

534,*SP--={30}:(*SP,{3})^006B6900:             
535,*SP--={30}:(*SP,*{6})^006B6904:
536,*SP--={30}:(*SP,*{6}++)^006B6908:
537,*SP--={30}:(*SP,*{6}--)^006B690C:
538,*SP--={30}:(*SP,#{8})^106B6900:           
 
539,*SP--={30}:({2},*SP++)^006B006A:           
540,*SP--={30}:(*{5},*SP++)^006B046A:
541,*SP--={30}:(*{5}++,*SP++)^006B086A:
542,*SP--={30}:(*{5}--,*SP++)^006B0C6A:
543,*SP--={30}:(@{2},*SP++)^206B006A:

544,*SP--={30}:({2},*SP)^006B0069:             
545,*SP--={30}:(*{5},*SP)^006B0469:
546,*SP--={30}:(*{5}++,*SP)^006B0869:
547,*SP--={30}:(*{5}--,*SP)^006B0C69:
548,*SP--={30}:(@{2},*SP)^206B0069:

549,{1}={30}:(*SP++,{3})^00006A00:              ;pop operandA (dual-operand)
550,{1}={30}:(*SP++,*{6})^00006A04:
551,{1}={30}:(*SP++,*{6}++)^00006A08:
552,{1}={30}:(*SP++,*{6}--)^00006A0C:
553,{1}={30}:(*SP++,#{8})^10006A00:

554,*{4}={30}:(*SP++,{3})^00046A00:            
555,*{4}={30}:(*SP++,*{6})^00046A04:
556,*{4}={30}:(*SP++,*{6}++)^00046A08:
557,*{4}={30}:(*SP++,*{6}--)^00046A0C:

558,*{4}={30}:(*SP++,#{8})^10046A00:

559,*{4}++={30}:(*SP++,{3})^00086A00:           
560,*{4}++={30}:(*SP++,*{6})^00086A04:
561,*{4}++={30}:(*SP++,*{6}++)^00086A08:
562,*{4}++={30}:(*SP++,*{6}--)^00086A0C:
563,*{4}++={30}:(*SP++,#{8})^10086A00:

564,*{4}--={30}:(*SP++,{3})^000C6A00:         
565,*{4}--={30}:(*SP++,*{6})^000C6A04:
566,*{4}--={30}:(*SP++,*{6}++)^000C6A08:
567,*{4}--={30}:(*SP++,*{6}--)^000C6A0C:
568,*{4}--={30}:(*SP++,#{8})^100C6A00:

569,{1}={30}:({2},*SP++)^0000006A:              ;pop operandB                          
570,{1}={30}:(*{5},*SP++)^0000046A:                                                   
571,{1}={30}:(*{5}++,*SP++)^0000086A:                                                   
572,{1}={30}:(*{5}--,*SP++)^00000C6A:         
                                          
573,{1}={30}:(@{2},*SP++)^2000006A:                                                   
574,*{4}={30}:({2},*SP++)^0004006A:                                                   
575,*{4}={30}:(*{5},*SP++)^0004046A:                                                   
576,*{4}={30}:(*{5}++,*SP++)^0004086A:                                                   
577,*{4}={30}:(*{5}--,*SP++)^00040C6A:                                                   
578,*{4}={30}:(@{2},*SP++)^2004006A:       
                                            
579,*{4}++={30}:({2},*SP++)^0008006A:                                                   
580,*{4}++={30}:(*{5},*SP++)^0008046A:                                                   
581,*{4}++={30}:(*{5}++,*SP++)^0008086A:                                                   
582,*{4}++={30}:(*{5}--,*SP++)^00080C6A:     
583,*{4}++={30}:(@{2},*SP++)^2008006A:                                                   
584,*{4}--={30}:({2},*SP++)^000C006A:                                                   
585,*{4}--={30}:(*{5},*SP++)^000C046A:                                                   
586,*{4}--={30}:(*{5}++,*SP++)^000C086A:                                                   
587,*{4}--={30}:(*{5}--,*SP++)^000C0C6A:                                                   
588,*{4}--={30}:(@{2},*SP++)^200C006A: 
 
589,{1}={30}:(*SP,{3})^00006900:                ;peek operandA from TOS (SP unaffected by the read-side of the operations)
590,{1}={30}:(*SP,*{6})^00006904:
591,{1}={30}:(*SP,*{6}++)^00006908:
592,{1}={30}:(*SP,*{6}--)^0000690C:
593,{1}={30}:(*SP,#{8})^10006900:
594,*{4}={30}:(*SP,{3})^00046900:        
595,*{4}={30}:(*SP,*{6})^00046904:
596,*{4}={30}:(*SP,*{6}++)^00046908:
597,*{4}={30}:(*SP,*{6}--)^0004690C:
598,*{4}={30}:(*SP,#{8})^10046900:
599,*{4}++={30}:(*SP,{3})^00086900:      
600,*{4}++={30}:(*SP,*{6})^00086904:
601,*{4}++={30}:(*SP,*{6}++)^00086908:
602,*{4}++={30}:(*SP,*{6}--)^0008690C:
603,*{4}++={30}:(*SP,#{8})^10086900:
604,*{4}--={30}:(*SP,{3})^000C6900:      
605,*{4}--={30}:(*SP,*{6})^000C6904:
606,*{4}--={30}:(*SP,*{6}++)^000C6908:
607,*{4}--={30}:(*SP,*{6}--)^000C690C:
608,*{4}--={30}:(*SP,#{8})^100C6900:
609,{1}={30}:({2},*SP)^00000069:                ;peek operandB from TOS (SP unaffected by the read-side of the operations)
610,{1}={30}:(*{5},*SP)^00000469:                        
611,{1}={30}:(*{5}++,*SP)^00000869:                        
612,{1}={30}:(*{5}--,*SP)^00000C69:                        
613,{1}={30}:(@{2},*SP)^20000069:                        
614,*{4}={30}:({2},*SP)^00040069:                        
615,*{4}={30}:(*{5},*SP)^00040469:                        
616,*{4}={30}:(*{5}++,*SP)^00040869:                        
617,*{4}={30}:(*{5}--,*SP)^00040C69:                        
618,*{4}={30}:(@{2},*SP)^20040069:                        
619,*{4}++={30}:({2},*SP)^00080069:                        
620,*{4}++={30}:(*{5},*SP)^00080469:                        
621,*{4}++={30}:(*{5}++,*SP)^00080869:                        
622,*{4}++={30}:(*{5}--,*SP)^00080C69:                        
623,*{4}++={30}:(@{2},*SP)^20080069:                        
624,*{4}--={30}:({2},*SP)^000C0069:                        
625,*{4}--={30}:(*{5},*SP)^000C0469:                        
626,*{4}--={30}:(*{5}++,*SP)^000C0869:                        
627,*{4}--={30}:(*{5}--,*SP)^000C0C69:                        
628,*{4}--={30}:(@{2},*SP)^200C0069:

629,{1}={30}:({2},{15},{14})^00000000:          ;SHFT 
630,{1}={30}:(*{5},{15},{14})^00000400:
631,{1}={30}:(*{5}++,{15},{14})^00000800:
632,{1}={30}:(*{5}--,{15},{14})^00000C00:
633,*{4}={30}:({2},{15},{14})^00040000:
634,*{4}={30}:(*{5},{15},{14})^00040400:
635,*{4}={30}:(*{5}--,{15},{14})^00040C00:
636,*{4}={30}:(*{5}++,{15},{14})^00040800:
637,*{4}++={30}:({2},{15},{14})^00080000:
638,*{4}++={30}:(*{5},{15},{14})^00080400:
639,*{4}++={30}:(*{5}++,{15},{14})^00080800:
640,*{4}++={30}:(*{5}--,{15},{14})^00080C00:
641,*{4}--={30}:({2},{15},{14})^000C0000:
642,*{4}--={30}:(*{5},{15},{14})^000C0400:
643,*{4}--={30}:(*{5}++,{15},{14})^000C0800:
644,*{4}--={30}:(*{5}--,{15},{14})^000C0C00:
645,{1}={30}:(@{2},{15},{14})^20000000:
646,*{4}={30}:(@{2},{15},{14})^20040000:
647,*{4}++={30}:(@{2},{15},{14})^20080000:
648,*{4}--={30}:(@{2},{15},{14})^200C0000:

649,*SP--={30}:({2},{15},{14})^006B0000:        ;shift with *SP-- as destination
650,*SP--={30}:(*{5},{15},{14})^006B0400:
651,*SP--={30}:(*{5}++,{15},{14})^006B0800:
652,*SP--={30}:(*{5}--,{15},{14})^006B0C00:
653,*SP--={30}:(*SP++,{15},{14})^006B6A00:
654,*SP--={30}:(*SP,{15},{14})^006B6800:        ;shift SP end

655,{10})^00000000:                 ;NEXT0/1 (DBNZ) alias

656,{2})(^00000000:                 ;"FOR"
657,*{5})(^40000000:
658,*{5}++)(^80000000:
659,*{5}--)(^C0000000:
660,#{7})(^30000000:
661,@{7})(^20000000:
662,*SP++)(^0000006A:
663,*SP)(^00000069:

664,{10}^00000000:                              ;conditional STATUS flag GOTO

665,{3}:[{9}]==1)GOTO:{10}^00000000:            ;BTBS  (32 bits)           
666,*{6}:[{9}]==1)GOTO:{10}^00000004:                                      
667,*{6}++:[{9}]==1)GOTO:{10}^00000008:                                      
668,*{6}--:[{9}]==1)GOTO:{10}^0000000C:
669,*SP:[{9}]==1)GOTO:{10}^00000069:
670,*SP++:[{9}]==1)GOTO:{10}^0000006A:

671,{3}:[{18}]==1)GOTO:{10}^00000000:           ;BTBS  (16 bits)        
672,*{6}:[{18}]==1)GOTO:{10}^00000004:                                   
673,*{6}++:[{18}]==1)GOTO:{10}^00000008:                                   
674,*{6}--:[{18}]==1)GOTO:{10}^0000000C:                        
675,*SP:[{18}]==1)GOTO:{10}^00000069:                           
676,*SP++:[{18}]==1)GOTO:{10}^0000006A:                         

677,{3}:[{19}]==1)GOTO:{10}^00000000:           ;BTBS  (8 bits)            
678,*{6}:[{19}]==1)GOTO:{10}^00000004:                                          
679,*{6}++:[{19}]==1)GOTO:{10}^00000008:                                          
680,*{6}--:[{19}]==1)GOTO:{10}^0000000C:                                          
681,*SP:[{19}]==1)GOTO:{10}^00000069:
682,*SP++:[{19}]==1)GOTO:{10}^0000006A:

683,{3}:[{9}]==0)GOTO:{10}^00004000:            ;BTBC  (32 bits)                  
684,*{6}:[{9}]==0)GOTO:{10}^00004004:                                            
685,*{6}++:[{9}]==0)GOTO:{10}^00004008:                                          
686,*{6}--:[{9}]==0)GOTO:{10}^0000400C:                                         
687,*SP:[{9}]==0)GOTO:{10}^00004069:                                            
688,*SP++:[{9}]==0)GOTO:{10}^0000406A:                                          

689,{3}:[{18}]==0)GOTO:{10}^00004000:           ;BTBC  (16 bits)           
690,*{6}:[{18}]==0)GOTO:{10}^00004004:                                      
691,*{6}++:[{18}]==0)GOTO:{10}^00004008:                                      
692,*{6}--:[{18}]==0)GOTO:{10}^0000400C:
693,*SP:[{18}]==0)GOTO:{10}^00004069:
694,*SP++:[{18}]==0)GOTO:{10}^0000406A:

695,{3}:[{19}]==0)GOTO:{10}^00004000:           ;BTBC  (8 bits)            
696,*{6}:[{19}]==0)GOTO:{10}^00004004:                                          
697,*{6}++:[{19}]==0)GOTO:{10}^00004008:                                          
698,*{6}--:[{19}]==0)GOTO:{10}^0000400C:                                          
699,*SP:[{19}]==0)GOTO:{10}^00004069:
700,*SP++:[{19}]==0)GOTO:{10}^0000406A:

* ;Mnemonic Definition section, which includes just a few of the many possible aliases.  Second nyble (4-bits) from the far left is the opcode

;--------------------------------------------------------------
; SYMPL INTERMEDIATE LANGUAGE (IL) mnemonics definition section
;--------------------------------------------------------------
W  |325-654 ^00000000:
H  |325-654 ^40000000:
B  |325-654 ^80000000:
E  |325-654 ^C0000000:
F  |325-654 ^00000000:
P  |325-654 ^40000000:
N  |325-654 ^80000000:
Z  |325-654 ^C0000000:
T0 |325-654 ^00000000:
T1 |325-654 ^40000000:
T2 |325-654 ^80000000:
T3 |325-654 ^C0000000:
X |325 ^C0000000:
FOR (LPCNT0 = |656-663 ^00660000:
FOR (LPCNT1 = |656-663 ^00670000:
NEXT LPCNT0 GOTO: |655 ^04000F66:
NEXT LPCNT1 GOTO: |655 ^04000F67:
GOTO|664 ^04001F6D:
IF (Z==1) GOTO:|664^0400006D:
IF (Z==0) GOTO:|664^0400406D:
IF (C==1)|664^0400016D:
IF (C==0)|664^0400416D:
IF (N==1)|664^0400026D:
IF (N==0)|664^0400426D:
IF (V==1)|664^0400036D:
IF (V==0)|664^0400436D:
IF (A==B)|664^0400006D:
IF (A!=B)|664^0400406D:
IF (A<B) |664^04005E6D:
IF (A<=B)|664^04005D6D:
IF (A>B) |664^04045D6D:
IF (A>=B)|664^04045E6D:
IF (|665-700 ^04000000: ;btbs or btbc
REPEAT |1-4^006C0000:  ; MOV srcA to location 6C (repeat counter)

;---------------------------------------------------------------
;traditional-style assembly language mnemonics
;---------------------------------------------------------------                               
MOV    |63-324 ^00000000:
AND    |87-324 ^01000000:                       
OR     |87-324 ^02000000:
XOR    |87-324 ^03000000:
BCND   |6      ^04000000:
BTBC   |33-62  ^04004000:
BTBS   |33-62  ^04000000:
DBNZ   |5      ^04000000:
SHFT   |7-32   ^05000000:
ADD    |87-324 ^06000000:                       
ADDC   |87-324 ^07000000:                       
SUB    |87-324 ^08000000:
SUBB   |87-324 ^09000000:
MUL    |87-324 ^0A000000:
RCP    |63-104 ^0B000000:
SIN    |63-104 ^0C000000:
COS    |63-104 ^0D000000:
TAN    |63-104 ^0E000000:
COT    |63-104 ^0F000000:
NOP    ^04001E6D:  ; BCND NEVER actually
SBRK   ^04001F6D:  ; BCND ALWAYS (to self) actually
RPT    |1-4^006C0000:  ; MOV srcA to location 6C (repeat counter)

;same as above, except switch from current thread to thread 1 (not available for RPT)
MOV.1  |63-324 ^40000000:
AND.1  |87-324 ^41000000:                       
OR.1   |87-324 ^42000000:
XOR.1  |87-324 ^43000000:
BCND.1 |6      ^44000000:
BTBC.1 |33-62  ^44004000:
BTBS.1 |33-62  ^44000000:
DBNZ.1 |5      ^44000000:
SHFT.1 |7-32   ^45000000:
ADD.1  |87-324 ^46000000:                       
ADDC.1 |87-324 ^47000000:                       
SUB.1  |87-324 ^48000000:
SUBB.1 |87-324 ^49000000:
MUL.1  |87-324 ^4A000000:
RCP.1  |63-104 ^4B000000:
SIN.1  |63-104 ^4C000000:
COS.1  |63-104 ^4D000000:
TAN.1  |63-104 ^4E000000:
COT.1  |63-104 ^4F000000:
NOP.1  ^44001E6D:  ; BCND NEVER actually
SBRK.1 ^44001F6D:  ; BCND ALWAYS (to self) actually

;same as above, except switch from current thread to thread 2 (not available for RPT)
MOV.2  |63-324 ^80000000:
AND.2  |87-324 ^81000000:             
OR.2   |87-324 ^82000000:
XOR.2  |87-324 ^83000000:
BCND.2 |6      ^84000000:
BTBC.2 |33-62  ^84004000:
BTBS.2 |33-62  ^84000000:
DBNZ.2 |5      ^84000000:
SHFT.2 |7-32   ^85000000:
ADD.2  |87-324 ^86000000:             
ADDC.2 |87-324 ^87000000:             
SUB.2  |87-324 ^88000000:
SUBB.2 |87-324 ^89000000:
MUL.2  |87-324 ^8A000000:
RCP.2  |63-104 ^8B000000:
SIN.2  |63-104 ^8C000000:
COS.2  |63-104 ^8D000000:
TAN.2  |63-104 ^8E000000:
COT.2  |63-104 ^8F000000:
NOP.2  ^84001E6D:  ; BCND NEVER actually
SBRK.2 ^84001F6D:  ; BCND ALWAYS (to self) actually

;same as above, except switch from current thread to thread 3 (not available for RPT)
MOV.3  |63-324 ^C0000000:
AND.3  |87-324 ^C1000000:            
OR.3   |87-324 ^C2000000:
XOR.3  |87-324 ^C3000000:
BCND.3 |6      ^C4000000:
BTBC.3 |33-62  ^C4004000:
BTBS.3 |33-62  ^C4000000:
DBNZ.3 |5      ^C4000000:
SHFT.3 |7-32   ^C5000000:
ADD.3  |87-324 ^C6000000:            
ADDC.3 |87-324 ^C7000000:            
SUB.3  |87-324 ^C8000000:
SUBB.3 |87-324 ^C9000000:
MUL.3  |87-324 ^CA000000:
RCP.3  |63-104 ^CB000000:
SIN.3  |63-104 ^CC000000:
COS.3  |63-104 ^CD000000:
TAN.3  |63-104 ^CE000000:
COT.3  |63-104 ^CF000000:
NOP.3  ^C4001E6D:  ; BCND NEVER actually
SBRK.3 ^C4001F6D:  ; BCND ALWAYS (to self) actually

;same as above, except operates on 8-bit values
MOV.B    |63-324 ^80000000:
AND.B    |87-324 ^81000000:                       
OR.B     |87-324 ^82000000:
XOR.B    |87-324 ^83000000:
SHFT.B   |7-32   ^85000000:
ADD.B    |87-324 ^86000000:                       
ADDC.B   |87-324 ^87000000:                       
SUB.B    |87-324 ^88000000:
SUBB.B   |87-324 ^89000000:
MUL.B    |87-324 ^8A000000:

;same as above, except operates on 16-bit values
MOV.H    |63-324 ^40000000:
AND.H    |87-324 ^41000000:                       
OR.H     |87-324 ^42000000:
XOR.H    |87-324 ^43000000:
SHFT.H   |7-32   ^45000000:
ADD.H    |87-324 ^46000000:                       
ADDC.H   |87-324 ^47000000:                       
SUB.H    |87-324 ^48000000:
SUBB.H   |87-324 ^49000000:
MUL.H    |87-324 ^4A000000:

;operates on values with endian-ness inverted
MOV.END  |63-324 ^C0000000:
AND.END  |87-324 ^C1000000:                       
OR.END   |87-324 ^C2000000:
XOR.END  |87-324 ^C3000000:
SHFT.END |7-32   ^C5000000:
ADD.END  |87-324 ^C6000000:                       
ADDC.END |87-324 ^C7000000:                       
SUB.END  |87-324 ^C8000000:
SUBB.END |87-324 ^C9000000:
MUL.END  |87-324 ^CA000000:

;directed rounding for memory-mapped floating-point operators with "nearest" being the default, hence no need to specify
MOV.P    |63-324 ^40000000:    ;round to positive infinity
MOV.N    |63-324 ^80000000:    ;round to negative infinity
MOV.Z    |63-324 ^C0000000:    ;round to zero (ie, truncate/no rounding)

;same as MOV #16, except with sign extended
MOV.EX  |62|84-86|98 ^C0000000:

  
*   ;equates section
MOV:        EQU     0x00
FADD:       EQU     0x00
FSUB:       EQU     0x00
FMUL:       EQU     0x00
FDIV:       EQU     0x00
FMA:        EQU     0x00
SQRT:       EQU     0x00
LOG:        EQU     0x00
EXP:        EQU     0x00
ITOF:       EQU     0x00
FTOI:       EQU     0x00
DOT:        EQU     0x00
TEST:       EQU     0x00
AND:        EQU     0x01
OR:         EQU     0x02
XOR:        EQU     0x03
SHIFT:      EQU     0x05
ADD:        EQU     0x06
ADDC:       EQU     0x07
SUB:        EQU     0x08
SUBB:       EQU     0x09
MUL:        EQU     0x0A
RCP:        EQU     0x0B
SIN:        EQU     0x0C
COS:        EQU     0x0D
TAN:        EQU     0x0E
COT:        EQU     0x0F

;--------------------------------------------------------------------------
;FP OPERATOR memory-mapped addresses and corresponding results storage bins
;--------------------------------------------------------------------------
FADD_0:     EQU     0x080
FADD_1:     EQU     0x081
FADD_2:     EQU     0x082
FADD_3:     EQU     0x083
FADD_4:     EQU     0x084
FADD_5:     EQU     0x085
FADD_6:     EQU     0x086
FADD_7:     EQU     0x087
FADD_8:     EQU     0x088
FADD_9:     EQU     0x089
FADD_A:     EQU     0x08A
FADD_B:     EQU     0x08B
FADD_C:     EQU     0x08C
FADD_D:     EQU     0x08D
FADD_E:     EQU     0x08E
FADD_F:     EQU     0x08F

FSUB_0:     EQU     0x090
FSUB_1:     EQU     0x091
FSUB_2:     EQU     0x092
FSUB_3:     EQU     0x093
FSUB_4:     EQU     0x094
FSUB_5:     EQU     0x095
FSUB_6:     EQU     0x096
FSUB_7:     EQU     0x097
FSUB_8:     EQU     0x098
FSUB_9:     EQU     0x099
FSUB_A:     EQU     0x09A
FSUB_B:     EQU     0x09B
FSUB_C:     EQU     0x09C
FSUB_D:     EQU     0x09D
FSUB_E:     EQU     0x09E
FSUB_F:     EQU     0x09F

FMUL_0:     EQU     0x0A0
FMUL_1:     EQU     0x0A1
FMUL_2:     EQU     0x0A2
FMUL_3:     EQU     0x0A3
FMUL_4:     EQU     0x0A4
FMUL_5:     EQU     0x0A5
FMUL_6:     EQU     0x0A6
FMUL_7:     EQU     0x0A7
FMUL_8:     EQU     0x0A8
FMUL_9:     EQU     0x0A9
FMUL_A:     EQU     0x0AA
FMUL_B:     EQU     0x0AB
FMUL_C:     EQU     0x0AC
FMUL_D:     EQU     0x0AD
FMUL_E:     EQU     0x0AE
FMUL_F:     EQU     0x0AF

ITOF_0:     EQU     0x0B0
ITOF_1:     EQU     0x0B1
ITOF_2:     EQU     0x0B2
ITOF_3:     EQU     0x0B3
ITOF_4:     EQU     0x0B4
ITOF_5:     EQU     0x0B5
ITOF_6:     EQU     0x0B6
ITOF_7:     EQU     0x0B7

FTOI_0:     EQU     0x0B8
FTOI_1:     EQU     0x0B9
FTOI_2:     EQU     0x0BA
FTOI_3:     EQU     0x0BB
FTOI_4:     EQU     0x0BC
FTOI_5:     EQU     0x0BD
FTOI_6:     EQU     0x0BE
FTOI_7:     EQU     0x0BF

FDIV_0:     EQU     0x0C0
FDIV_1:     EQU     0x0C1
FDIV_2:     EQU     0x0C2
FDIV_3:     EQU     0x0C3
FDIV_4:     EQU     0x0C4
FDIV_5:     EQU     0x0C5
FDIV_6:     EQU     0x0C6
FDIV_7:     EQU     0x0C7
FDIV_8:     EQU     0x0C8
FDIV_9:     EQU     0x0C9
FDIV_A:     EQU     0x0CA
FDIV_B:     EQU     0x0CB
FDIV_C:     EQU     0x0CC
FDIV_D:     EQU     0x0CD
FDIV_E:     EQU     0x0CE
FDIV_F:     EQU     0x0CF

SQRT_0:     EQU     0x0D0
SQRT_1:     EQU     0x0D1
SQRT_2:     EQU     0x0D2
SQRT_3:     EQU     0x0D3
SQRT_4:     EQU     0x0D4
SQRT_5:     EQU     0x0D5
SQRT_6:     EQU     0x0D6
SQRT_7:     EQU     0x0D7
SQRT_8:     EQU     0x0D8
SQRT_9:     EQU     0x0D9
SQRT_A:     EQU     0x0DA
SQRT_B:     EQU     0x0DB
SQRT_C:     EQU     0x0DC
SQRT_D:     EQU     0x0DD
SQRT_E:     EQU     0x0DE
SQRT_F:     EQU     0x0DF

FMA_0:      EQU     0x0E0
FMA_1:      EQU     0x0E1
FMA_2:      EQU     0x0E2
FMA_3:      EQU     0x0E3
FMA_4:      EQU     0x0E4
FMA_5:      EQU     0x0E5
FMA_6:      EQU     0x0E6
FMA_7:      EQU     0x0E7
FMA_8:      EQU     0x0E8
FMA_9:      EQU     0x0E9
FMA_A:      EQU     0x0EA
FMA_B:      EQU     0x0EB
FMA_C:      EQU     0x0EC
FMA_D:      EQU     0x0ED
FMA_E:      EQU     0x0EE
FMA_F:      EQU     0x0EF

LOG_0:      EQU     0x0F0
LOG_1:      EQU     0x0F1
LOG_2:      EQU     0x0F2
LOG_3:      EQU     0x0F3
LOG_4:      EQU     0x0F4
LOG_5:      EQU     0x0F5
LOG_6:      EQU     0x0F6
LOG_7:      EQU     0x0F7

EXP_0:      EQU     0x0F8
EXP_1:      EQU     0x0F9
EXP_2:      EQU     0x0FA
EXP_3:      EQU     0x0FB
EXP_4:      EQU     0x0FC
EXP_5:      EQU     0x0FD
EXP_6:      EQU     0x0FE
EXP_7:      EQU     0x0FF
