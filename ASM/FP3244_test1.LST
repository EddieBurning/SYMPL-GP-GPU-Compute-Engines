 00000000                                  CPU  "aSYMPL32.TBL"
 00000000                                  HOF  "MOT32"
 00000000                                  WDLN 4
                                ; FP324-AXI4 test1
                                ; version 1.01   July 30, 2015
                                ; Author:  Jerry D. Harthcock
                                ; Copyright (C) 2015.  All rights reserved without prejudice.
                                           
                                ;--------------------------------------------------------------------------           
                                ;         internal memory-mapped h/w registers
                                ;--------------------------------------------------------------------------
 00000073         =             AR3:        EQU     0x73                    ;Auxiliary Reg 3
 00000072         =             AR2:        EQU     0x72                    ;Auxiliary Reg 2
 00000071         =             AR1:        EQU     0x71                    ;Auxiliary Reg 1
 00000070         =             AR0:        EQU     0x70                    ;Auxiliary Reg 0
 0000006F         =             PC:         EQU     0x6F                    ;Program Counter
 0000006E         =             PC_COPY:    EQU     0x6E
 0000006D         =             STATUS:     EQU     0x6D                    ;Statis Register
 0000006C         =             SCHED:      EQU     0x6C                    ;scheduler
 0000006B         =             SCHEDCMP:   EQU     0x6B                    ;scheduler max count values
 0000006A         =             OUTBOX:     EQU     0x6A                    ;out box
 00000069         =             LPCNT1:     EQU	    0x69		   	        ;dedicated loop counter 1 
 00000068         =             LPCNT0:	    EQU	    0x68 			        ;dedicated loop counter 0
 00000067         =             TIMER:      EQU     0x67                    ;timer
 00000064         =             RPT:        EQU     0x64                    ;repeat counter location
                                
                                ;zero-page storage
 00000020         =             NMI_PC_save EQU     0x20                    ;save PC_COPY here immediately upon entry to NMI service routine
 00000021         =             EXC_PC_save EQU     0x21                    ;save PC_COPY here immediately upon entry to FP EXC service routine
 00000022         =             IRQ_PC_save EQU     0x22                    ;save PC_COPY here immediately upon entry to IRQ service routine
 00000023         =             FGS_save:   EQU     0x23                    ;location for saving original Fine-Grain scheduler
 00000024         =             work_1:     EQU     0x24                    
 00000025         =             work_2:     EQU     0x25
 00000026         =             work_3:     EQU     0x26
 00000027         =             work_4:     EQU     0x27
 00000028         =             work_5:     EQU     0x28
 00000029         =             lst_len:    EQU     0x29                    ;length of list goes here
 0000002A         =             constA:     EQU     0x2A                    ;constant A goes here
 0000002B         =             constB:     EQU     0x2B                    ;constant B goes here
 0000002C         =             constC:     EQU     0x2C                    ;constant C goes here
                                
 00000800         =             packet:     EQU     0x0800                  ;start location of the data packet to be processed
                                
                                ;constant immediate value equates
 00000020         =             DONE_BIT:   EQU     0x20                    ;bit [5] is DONE Bit in status register
                                
                                     
                                ;this thread first loads all FP operators with some arbitrary value followed by a read of the resutls
                                ;then performs the following integer calculation on each 32-bit entry in the submitted list and written back over the submitted value
                                ; result = AX^2 + BX + C    
                                  
                                            
 000000FD                                   org     0x0FD              
                                
 000000FD 0000010A              Constants:  DFL     start                   ;program memory locations 0x000 - 0x0FF reserved for look-up table
                                        
 000000FE 00000033              prog_len:   DFL     progend - Constants
 000000FF 40490FD0              pi:         DFF     3.14159
                                              
                                ;           func    dest, srcA, srcB 
                                
 00000100                                   org     0x00000100
 00000100 306F0104              RST_VECT:   mov     PC, #done               ;reset vector
 00000101 306F0127              NMI_VECT:   mov     PC, #NMI_               ;NMI vector
 00000102 306F012A              EXC_VECT:   mov     PC, #EXC_               ;maskable FP exception vector
 00000103 306F012D              IRQ_VECT:   mov     PC, #IRQ_               ;maskable general-purpose interrupt vector
                                
 00000104 30730800              done:       mov     AR3, #packet            ;point to start of packet which is both a semaphor and entry point for thread
 00000105 126D6D20              semphr:     or      STATUS, STATUS, #DONE_BIT   ; signal external CPU (load-balancer/coarse-grain scheduler) process is done
                                                                            ;note that the DONE_BIT is already set upon initial entry but is cleared three instruction below "start"
                                                                            ;to signal CPU thread has started (ie, not done)        
 00000106 12247700              spin:       or      work_1, *AR3, #0        ;see if first location (the semaphor and routine entry point) of packet is non-zero
                                                                            ;during this time the CPU is pushing packet into Shader memory and, as a final step,
                                                                            ;and will write the non-zero PC entry point to the location pointed to by AR3 when AXI4 DMA xfer is complete
 00000107 04FF006D                          bcnd    spin, Z                 ;if semaphr is 0 then wait for this value to become non-zero in the packet RAM block
 00000108 30770000                          mov     *AR3, #0                ;clear the semaphor now so we don't fall through again when we get done and come back here
 00000109 006F2400                          mov     PC, work_1              ;else perform the specified thread pointed to by contents of work_1, in this case, "start"
                                        
 0000010A                       start:  
 0000010A 30670064                          mov     TIMER, #100             ;load time-out timer with small value to induce timeout NMI before completion (for testing/simulation purposes)
 0000010B 30730801                          mov     AR3, #packet + 1        ;load AR3 with pointer to list length in parameter/data packet just received                                 
 0000010C 116D6DDF                          and     STATUS, STATUS, #0xDF   ;clear the DONE bit
 0000010D 00687B00                          mov     LPCNT0, *AR3++          ;copy list length into hardware loop counter LPCNT0 
 0000010E 002A7B00                          mov     constA, *AR3++          ;copy constA from packet
 0000010F 002B7B00                          mov     constB, *AR3++          ;copy constB
 00000110 002C7B00                          mov     constC, *AR3++          ;copy constC, after which, AR3 should now be pointing at the 1st element in the list
                                        
                                               
 00000111 0A247777              loop:       mul     work_1, *AR3, *AR3      ;square X
 00000112 0A24242A                          mul     work_1, work_1, constA  ;multiply X^2 * constA
 00000113 0A25772B                          mul     work_2, *AR3, constB    ;multiply X * constB
 00000114 06262425                          add     work_3, work_1, work_2  ;add AX^2 + BX
 00000115 067B262C                          add     *AR3++, work_3, constC  ;get final answer and write back over original value X
 00000116 04FB0F68                          dbnz    loop, LPCNT0            ;decrement dedicated hardware loop counter 0 and, if not zero, then do next value in the list
                                                                            ;note that dbnz is an alias of BTBS, with bit 15 of LPCNT0 being tested for "1" condition (ie, Zero)
                                                                            ;also note that LPCNT0 and LPCNT1 h/w decrement counters are actually only 13-bits wide, allowing their dedicated
                                                                            ;Zero flags to occupy bit 15 at the same address when read by the alias BTBS instruction, DBNZ
                                
                                ;the following instructins don't really anthing useful except for exercising the floating-point operators for test/simulation purposes
 00000117 30B60002                          mov     ITOF_6, #2              ;convert integer 2 to float 2.0
 00000118 2028FF00                          mov     work_5, @pi             ;read pi out of ROM and store it in direct memory work_5
 00000119 0027B600                          mov     work_4, ITOF_6          ;move result of ITOF to directly addressable RAM location work_4
 0000011A 00C42827                          mov     FDIV_4, work_5, work_4  ;FDIV pi by 2.0
                                ;sema:       btbc    sema, 5, FDIV_4         ;test semaphor bit for FDIV_4 (bit 5) and try again if cleared (for H/W simulation purposes in this instance)
                                                                            ;note that the above btbc instruction is superfluous because a MOV read operation from
                                                                            ;any float operator address will rewind the PC automatically if the ready semaphor for that
                                                                            ;operator location is not set (ie, not ready).  Technically speaking, the instruction pipeline never stalls, because
                                                                            ;no opcode ever consumes more than one clock regardless of the state of a given FP operator semaphor, because
                                                                            ; the PC is automatically rewound to re-fetch if not ready
                                
 0000011B 00E12700                          mov     LOG_1,  work_4          ;get the log of 2.0
 0000011C 2082FF27                          mov     FADD_2, @pi, work_4     ;FADD pi + 2.0   (FADD_2, work_4, work_4 will yeild the same result)
 0000011D 00972827                          mov     FSUB_7, work_5, work_4  ;FSUB 2 from pi
 0000011E 00A92727                          mov     FMUL_9, work_4, work_4  ;get the square of 2.0
 0000011F 00F3E100                          mov     EXP_3, LOG_1            ;convert log of 2.0 back to 2.0
 00000120 00D8A900                          mov     SQRT_8, FMUL_9          ;get the SQRT of 4.0
 00000121 007BC400                          mov     *AR3++, FDIV_4          ;read out reslts from FDIV_4 and store in next location in parameter/data buffer
 00000122 007B8200                          mov     *AR3++, FADD_2          ;same for FADD_2 (should be 5.14159)
 00000123 007BF300                          mov     *AR3++, EXP_3           ;same for EXP_3 (should be 2.0)
 00000124 007B9700                          mov     *AR3++, FSUB_7          ;same for FSUB_7 (should be 1.14149)
 00000125 00BDD800                          mov     FTOI_5, SQRT_8          ;read out results from SQRT_8 and convert to integer (results should be 2)
                                                                            
 00000126 306F0104                          mov     PC, #done               ;jump to done, semphr test and spin for next packet
                                ; interrupt service routines        
 00000127 00206E00              NMI_:       mov     NMI_PC_save, PC_COPY    ;save return address from non-maskable interrupt (time-out timer in this instance)
 00000128 30672710                          mov     TIMER, #10000           ;put a new value in the timer
 00000129 006F2000                          mov     PC, NMI_PC_save         ;return from interrupt
                                        
 0000012A 00216E00              EXC_:       mov     EXC_PC_save, PC_COPY    ;save return address from floating-point exception, which is maskable
 0000012B 30672710                          mov     TIMER, #10000           ;put a new value in the timer
 0000012C 006F2100                          mov     PC, EXC_PC_save         ;return from interrupt
                                
 0000012D 00226E00              IRQ_:       mov     IRQ_PC_save, PC_COPY    ;save return address (general-purpose, maskable interrupt)
 0000012E 30672710                          mov     TIMER, #10000           ;put a new value in the timer
 0000012F 006F2200                          mov     PC, IRQ_PC_save         ;return from interrupt
                                                                     
 00000130                       progend:        
 00000000                                   end
00000070  AR0                00000071  AR1                00000072  AR2                
00000073  AR3                0000002A  CONSTA             000000FD  CONSTANTS          
0000002B  CONSTB             0000002C  CONSTC             00000104  DONE               
00000020  DONE_BIT           0000012A  EXC_               00000021  EXC_PC_SAVE        
00000102  EXC_VECT           000000F0  EXP_0              000000F1  EXP_1              
000000F2  EXP_2              000000F3  EXP_3              000000F4  EXP_4              
000000F5  EXP_5              000000F6  EXP_6              000000F7  EXP_7              
000000F8  EXP_8              000000F9  EXP_9              000000FA  EXP_A              
000000FB  EXP_B              000000FC  EXP_C              000000FD  EXP_D              
000000FE  EXP_E              000000FF  EXP_F              00000080  FADD_0             
00000081  FADD_1             00000082  FADD_2             00000083  FADD_3             
00000084  FADD_4             00000085  FADD_5             00000086  FADD_6             
00000087  FADD_7             00000088  FADD_8             00000089  FADD_9             
0000008A  FADD_A             0000008B  FADD_B             0000008C  FADD_C             
0000008D  FADD_D             0000008E  FADD_E             0000008F  FADD_F             
000000C0  FDIV_0             000000C1  FDIV_1             000000C2  FDIV_2             
000000C3  FDIV_3             000000C4  FDIV_4             000000C5  FDIV_5             
000000C6  FDIV_6             000000C7  FDIV_7             000000C8  FDIV_8             
000000C9  FDIV_9             000000CA  FDIV_A             000000CB  FDIV_B             
000000CC  FDIV_C             000000CD  FDIV_D             000000CE  FDIV_E             
000000CF  FDIV_F             00000023  FGS_SAVE           000000A0  FMUL_0             
000000A1  FMUL_1             000000A2  FMUL_2             000000A3  FMUL_3             
000000A4  FMUL_4             000000A5  FMUL_5             000000A6  FMUL_6             
000000A7  FMUL_7             000000A8  FMUL_8             000000A9  FMUL_9             
000000AA  FMUL_A             000000AB  FMUL_B             000000AC  FMUL_C             
000000AD  FMUL_D             000000AE  FMUL_E             000000AF  FMUL_F             
00000090  FSUB_0             00000091  FSUB_1             00000092  FSUB_2             
00000093  FSUB_3             00000094  FSUB_4             00000095  FSUB_5             
00000096  FSUB_6             00000097  FSUB_7             00000098  FSUB_8             
00000099  FSUB_9             0000009A  FSUB_A             0000009B  FSUB_B             
0000009C  FSUB_C             0000009D  FSUB_D             0000009E  FSUB_E             
0000009F  FSUB_F             000000B8  FTOI_0             000000B9  FTOI_1             
000000BA  FTOI_2             000000BB  FTOI_3             000000BC  FTOI_4             
000000BD  FTOI_5             000000BE  FTOI_6             000000BF  FTOI_7             
0000012D  IRQ_               00000022  IRQ_PC_SAVE        00000103  IRQ_VECT           
000000B0  ITOF_0             000000B1  ITOF_1             000000B2  ITOF_2             
000000B3  ITOF_3             000000B4  ITOF_4             000000B5  ITOF_5             
000000B6  ITOF_6             000000B7  ITOF_7             000000E0  LOG_0              
000000E1  LOG_1              000000E2  LOG_2              000000E3  LOG_3              
000000E4  LOG_4              000000E5  LOG_5              000000E6  LOG_6              
000000E7  LOG_7              000000E8  LOG_8              000000E9  LOG_9              
000000EA  LOG_A              000000EB  LOG_B              000000EC  LOG_C              
000000ED  LOG_D              000000EE  LOG_E              000000EF  LOG_F              
00000111  LOOP               00000068  LPCNT0             00000069  LPCNT1             
00000029  LST_LEN            00000127  NMI_               00000020  NMI_PC_SAVE        
00000101  NMI_VECT           0000006A  OUTBOX             00000800  PACKET             
0000006F  PC                 0000006E  PC_COPY            000000FF  PI                 
00000130  PROGEND            000000FE  PROG_LEN           00000064  RPT                
00000100  RST_VECT           0000006C  SCHED              0000006B  SCHEDCMP           
00000105  SEMPHR             00000106  SPIN               000000D0  SQRT_0             
000000D1  SQRT_1             000000D2  SQRT_2             000000D3  SQRT_3             
000000D4  SQRT_4             000000D5  SQRT_5             000000D6  SQRT_6             
000000D7  SQRT_7             000000D8  SQRT_8             000000D9  SQRT_9             
000000DA  SQRT_A             000000DB  SQRT_B             000000DC  SQRT_C             
000000DD  SQRT_D             000000DE  SQRT_E             000000DF  SQRT_F             
0000010A  START              0000006D  STATUS             00000067  TIMER              
00000024  WORK_1             00000025  WORK_2             00000026  WORK_3             
00000027  WORK_4             00000028  WORK_5             
