 00000000                                  CPU  "aSYMPL32.TBL"
 00000000                                  HOF  "MOT32"
 00000000                                  WDLN 4
                                ; FP324 test1
                                ; version 1.02   Nov 10, 2015
                                ; Author:  Jerry D. Harthcock
                                ; Copyright (C) 2015.  All rights reserved without prejudice.
                                           
                                ;--------------------------------------------------------------------------           
                                ;         internal memory-mapped h/w registers
                                ;--------------------------------------------------------------------------
 00000073         =             AR3:        EQU     0x73                    ;Auxiliary Reg 3
 00000072         =             AR2:        EQU     0x72                    ;Auxiliary Reg 2
 00000071         =             AR1:        EQU     0x71                    ;Auxiliary Reg 1
 00000070         =             AR0:        EQU     0x70                    ;Auxiliary Reg 0
 0000006F         =             PC:         EQU     0x6F                    ;Program Counter
 0000006E         =             PC_COPY:    EQU     0x6E
 0000006D         =             STATUS:     EQU     0x6D                    ;Statis Register
 0000006C         =             SCHED:      EQU     0x6C                    ;scheduler
 0000006B         =             SCHEDCMP:   EQU     0x6B                    ;scheduler max count values
 0000006A         =             C_reg:      EQU     0x6A                    ;FMA C register
 00000069         =             LPCNT1:     EQU	    0x69		   	        ;dedicated loop counter 1 
 00000068         =             LPCNT0:	    EQU	    0x68 			        ;dedicated loop counter 0
 00000067         =             TIMER:      EQU     0x67                    ;timer
 00000066         =             QOS:        EQU     0x66                    ;quality of service exception counters
 00000065         =             DOT:        EQU     0x65                    ;DOT operator
 00000064         =             RPT:        EQU     0x64                    ;repeat counter location
 00000063         =             CAPTURE3:   EQU     0x63                    ;alternate delayed exception capture register 3
 00000062         =             CAPTURE2:   EQU     0x62                    ;alternate delayed exception capture register 2
 00000061         =             CAPTURE1:   EQU     0x61                    ;alternate delayed exception capture register 1
 00000060         =             CAPTURE0:   EQU     0x60                    ;alternate delayed exception capture register 0
                                
                                ;zero-page storage
 00000001         =             NMI_save    EQU     0x01                    ;save PC_COPY here immediately upon entry to NMI service routine
 00000002         =             INV_save    EQU     0x02                    ;invalid exception PC_COPY save location
 00000003         =             DIVx0_save  EQU     0x03                    ;divide by 0 exception PC_COPY save location
 00000004         =             OVFL_save   EQU     0x04                    ;overflow exception PC_COPY save location
 00000005         =             UNFL_save   EQU     0x05                    ;underflow exception PC_COPY save location
 00000006         =             INEX_save   EQU     0x06                    ;inexact exception PC_COPY save location
 00000007         =             IRQ_PC_save EQU     0x07                    ;save PC_COPY here immediately upon entry to general-purpose IRQ service routine
 00000008         =             FGS_save:   EQU     0x08                    ;location for saving original Fine-Grain scheduler
 00000014         =             work_1:     EQU     0x14                    
 00000015         =             work_2:     EQU     0x15
 00000016         =             work_3:     EQU     0x16
 00000017         =             work_4:     EQU     0x17
 00000018         =             work_5:     EQU     0x18
 00000019         =             work_6:     EQU     0x19
 0000001A         =             capt0_save: EQU     0x1A                    ;alternate delayed exception capture register 0 save location
 0000001B         =             capt1_save: EQU     0x1B                    ;alternate delayed exception capture register 1 save location
 0000001C         =             capt2_save: EQU     0x1C                    ;alternate delayed exception capture register 2 save location
 0000001D         =             capt3_save: EQU     0x1D                    ;alternate delayed exception capture register 3 save location
                                
 0000001E         =             sign_mask:  EQU     0x1E                    ;0x80000000 goes here--used for setting, clearing, toggling sign bit
                                ;for storage of parameters for 3D transform
 00000020         =             triangles:  EQU     0x20                    ;number of triangles to process
 00000021         =             sin_thetaX: EQU     0x21                    ;sine of theta X for rotate X
 00000022         =             cos_thetaX: EQU     0x22                    ;cosine of theta X for rotate X
 00000023         =             sin_thetaY: EQU     0x23                    ;sine of theta Y for rotate Y
 00000024         =             cos_thetaY: EQU     0x24                    ;cosine of theta Y for rotate Y
 00000025         =             sin_thetaZ: EQU     0x25                    ;sine of theta X for rotate Z
 00000026         =             cos_thetaZ: EQU     0x26                    ;cosine of theta X for rotate Z
 00000027         =             scaleX:     EQU     0x27                    ;scale factor X axis
 00000028         =             scaleY:     EQU     0x28                    ;scale factor Y axis
 00000029         =             scaleZ:     EQU     0x29                    ;scale factor Z axis
 0000002A         =             transX:     EQU     0x2A                    ;translate amount X axis
 0000002B         =             transY:     EQU     0x2B                    ;translate amount Y axis
 0000002C         =             transZ:     EQU     0x2C                    ;translate amount Z axis
                                
 00000800         =             packet:     EQU     0x0800                  ;start location in parameter-data buffer (PDB) of the data packet to be processed
                                
                                ;constant immediate value equates
 00000020         =             DONE_BIT:   EQU     0x20                    ;bit [5] is DONE Bit in status register  
                                            
 000000FE                                   org     0x0FE              
                                
 000000FE 0000010E              Constants:  DFL     start                   ;program memory locations 0x000 - 0x0FF reserved for look-up table
                                        
 000000FF 0000008F              prog_len:   DFL     progend - Constants
                                              
                                ;           func    dest, srcA, srcB 
                                
 00000100                                   org     0x00000100
 00000100 306F0108              RST_VECT:   mov     PC, #done               ;reset vector
 00000101 306F0173              NMI_VECT:   mov     PC, #NMI_               ;NMI vector
 00000102 306F0176              INV_VECT:   mov     PC, #INV_               ;invalid operation exception vector location
 00000103 306F017A              DIVx0_VECT: mov     PC, #DIVx0_             ;divide by 0 exception vector location
 00000104 306F0181              OVFL_VECT:  mov     PC, #OVFL_              ;overflow exception vector location
 00000105 306F0184              UNFL_VECT:  mov     PC, #UNFL_              ;underflow exception vector location
 00000106 306F0187              INEXT_VECT: mov     PC, #INEXT_             ;inexact exception vector location
 00000107 306F018A              IRQ_VECT:   mov     PC, #IRQ_               ;maskable general-purpose interrupt vector
                                
 00000108 30730800              done:       mov     AR3, #packet            ;point to start of packet which is both a semaphor and entry point for thread
 00000109 126D6D20              semphr:     or      STATUS, STATUS, #DONE_BIT   ; signal external CPU (load-balancer/coarse-grain scheduler) process is done
                                                                            ;note that the DONE_BIT is already set upon initial entry but is cleared three instruction below "start"
                                                                            ;to signal CPU thread has started (ie, not done)        
 0000010A 12147700              spin:       or      work_1, *AR3, #0        ;see if first location (the semaphor and routine entry point) of packet is non-zero
                                                                            ;during this time the CPU is pushing packet into Shader memory and, as a final step,
                                                                            ;and will write the non-zero PC entry point to the location pointed to by AR3 when xfer is complete
 0000010B 04FF006D                          bcnd    spin, Z                 ;if semaphr is 0 then wait for this value to become non-zero in the packet RAM block
 0000010C 30770000                          mov     *AR3, #0                ;clear the semaphor now so we don't fall through again when we get done and come back here
 0000010D 006F1400                          mov     PC, work_1              ;else perform the specified thread pointed to by contents of work_1, in this case, "start"
                                        
 0000010E                       start:  
 0000010E 30672710                          mov     TIMER, #10000           ;load time-out timer with sufficient time to process before timeout
 0000010F 30730801                          mov     AR3, #packet + 1        ;load AR3 with pointer to list length in parameter/data packet just received--AR3 is read pointer                   
 00000110 116D6DDF                          and     STATUS, STATUS, #0xDF   ;clear the DONE bit to signal we are now busy
                                            
 00000111 00207B00                          mov     triangles, *AR3++       ;save number of triangles 
 00000112 0C217700                          sin     sin_thetaX, *AR3        ;calculate sine of theta X and save
 00000113 0D227B00                          cos     cos_thetaX, *AR3++      ;calculate cosine of theta X and save
 00000114 0C237700                          sin     sin_thetaY, *AR3        ;calculate sine of theta Y and save
 00000115 0D247B00                          cos     cos_thetaY, *AR3++      ;calculate cosine of theta Y and save
 00000116 0C257700                          sin     sin_thetaZ, *AR3        ;calculate sine of theta Z and save
 00000117 0D267B00                          cos     cos_thetaZ, *AR3++      ;calculate cosine of theta Z and save
 00000118 00277B00                          mov     scaleX, *AR3++          ;save scale X factor
 00000119 00287B00                          mov     scaleY, *AR3++          ;save scale Y factor
 0000011A 00297B00                          mov     scaleZ, *AR3++          ;save scale Z factor
 0000011B 002A7B00                          mov     transX, *AR3++          ;save translate X axis amount
 0000011C 002B7B00                          mov     transY, *AR3++          ;save translate Y axis amount
 0000011D 002C7B00                          mov     transZ, *AR3++          ;save translate Z axis amount
                                            ; AR3 is now pointing to first X of first triangle
 0000011E 00727300                          mov     AR2, AR3                ;copy AR3 contents to AR2 so AR2 can be used as write pointer back to PDB for saving results
                                            
 0000011F 00682000                          mov     LPCNT0, triangles       ;load loop counter 0 with number of triangles 
                                            
                                            ;the following routine performs scaling on all three axis first, 
                                            ;rotate on all three axis second, then translate on all three axis last 
                                                              
 00000120                       loop:   ;scale on X, Y, Z axis
                                            ;vertex 1
 00000120 00A07B27                          mov     FMUL_0, *AR3++, scaleX
 00000121 00A17B28                          mov     FMUL_1, *AR3++, scaleY
 00000122 00A27B29                          mov     FMUL_2, *AR3++, scaleZ
                                            ;vertex 2
 00000123 00A37B27                          mov     FMUL_3, *AR3++, scaleX
 00000124 00A47B28                          mov     FMUL_4, *AR3++, scaleY
 00000125 00A57B29                          mov     FMUL_5, *AR3++, scaleZ
                                            ;vertex 3
 00000126 00A67B27                          mov     FMUL_6, *AR3++, scaleX
 00000127 00A77B28                          mov     FMUL_7, *AR3++, scaleY
 00000128 00A87B29                          mov     FMUL_8, *AR3++, scaleZ
                                            
                                ;           X1 is now in FMUL_0         
                                ;           Y1 is now in FMUL_1         
                                ;           Z1 is now in FMUL_2         
                                ;           X2 is now in FMUL_3         
                                ;           Y2 is now in FMUL_4         
                                ;           Z2 is now in FMUL_5         
                                ;           X3 is now in FMUL_6         
                                ;           Y3 is now in FMUL_7         
                                ;           Z3 is now in FMUL_8         
                                            
                                  ;rotate around X axis
                                       ;vertex 1
                                            ; (cos(xrot) * Y1) - (sin(xrot) * Z1) 
 00000129 00A9A122                          mov     FMUL_9, FMUL_1, cos_thetaX      ; FMUL_9 = (cos(xrot) * Y1)
 0000012A 00AAA221                          mov     FMUL_A, FMUL_2, sin_thetaX      ; FMUL_A = (sin(xrot) * Z1)
                                            ; (sin(xrot) * Y1) + (cos(xrot) * Z1) 
 0000012B 00ABA121                          mov     FMUL_B, FMUL_1, sin_thetaX      ; FMUL_B = (sin(xrot) * Y1)
 0000012C 00ACA222                          mov     FMUL_C, FMUL_2, cos_thetaX      ; FMUL_C = (cos(xrot) * Z1)
                                            
 0000012D 0090A9AA                          mov     FSUB_0, FMUL_9, FMUL_A          ; FSUB_0 = (cos(xrot) * Y1) - (sin(xrot) * Z1)
 0000012E 0080ABAC                          mov     FADD_0, FMUL_B, FMUL_C          ; FADD_0 = (sin(xrot) * Y1) + (cos(xrot) * Z1)
                                
                                       ;vertex 2
                                            ; (cos(xrot) * Y2) - (sin(xrot) * Z2) 
 0000012F 00A1A422                          mov     FMUL_1, FMUL_4, cos_thetaX      ; FMUL_1 = (cos(xrot) * Y2)
 00000130 00A2A521                          mov     FMUL_2, FMUL_5, sin_thetaX      ; FMUL_2 = (sin(xrot) * Z2)
                                            ; (sin(xrot) * Y2) + (cos(xrot) * Z2) 
 00000131 00ADA421                          mov     FMUL_D, FMUL_4, sin_thetaX      ; FMUL_D = (sin(xrot) * Y2)
 00000132 00AEA522                          mov     FMUL_E, FMUL_5, cos_thetaX      ; FMUL_E = (cos(xrot) * Z2)
                                            
 00000133 0091A1A2                          mov     FSUB_1, FMUL_1, FMUL_2          ; FSUB_1 = (cos(xrot) * Y2) - (sin(xrot) * Z2)
 00000134 0081ADAE                          mov     FADD_1, FMUL_D, FMUL_E          ; FADD_1 = (sin(xrot) * Y2) + (cos(xrot) * Z2)
                                
                                       ;vertex 3
                                            ; (cos(xrot) * Y3) - (sin(xrot) * Z3) 
 00000135 00A9A722                          mov     FMUL_9, FMUL_7, cos_thetaX      ; FMUL_9 = (cos(xrot) * Y3)
 00000136 00AAA821                          mov     FMUL_A, FMUL_8, sin_thetaX      ; FMUL_A = (sin(xrot) * Z3)
                                            ; (sin(xrot) * Y3) + (cos(xrot) * Z3) 
 00000137 00ABA721                          mov     FMUL_B, FMUL_7, sin_thetaX      ; FMUL_B = (sin(xrot) * Y3)
 00000138 00ACA822                          mov     FMUL_C, FMUL_8, cos_thetaX      ; FMUL_C = (cos(xrot) * Z3)
                                            
 00000139 0092A9AA                          mov     FSUB_2, FMUL_9, FMUL_A          ; FSUB_2 = (cos(xrot) * Y3) - (sin(xrot) * Z3)
 0000013A 0082ABAC                          mov     FADD_2, FMUL_B, FMUL_C          ; FADD_2 = (sin(xrot) * Y3) + (cos(xrot) * Z3)            
                                            
                                ;           X1 is now in FMUL_0
                                ;           Y1 is now in FSUB_0
                                ;           Z1 is now in FADD_0 
                                ;           X2 is now in FMUL_3
                                ;           Y2 is now in FSUB_1
                                ;           Z2 is now in FADD_1
                                ;           X3 is now in FMUL_6
                                ;           Y3 is now in FSUB_2
                                ;           Z3 is now in FADD_2      
                                
                                  ;rotate around Y axis
                                       ;vertex 1
                                            ; (cos(yrot) * X1) + (sin(yrot) * Z1) 
 0000013B 00A1A024                          mov     FMUL_1, FMUL_0, cos_thetaY      ; FMUL_1 = (cos(yrot) * X1)
 0000013C 00A28023                          mov     FMUL_2, FADD_0, sin_thetaY      ; FMUL_2 = (sin(yrot) * Z1)
                                            ; (cos(yrot) * Z1) - (sin(yrot) * X1)
 0000013D 00A48024                          mov     FMUL_4, FADD_0, cos_thetaY      ; FMUL_4 = (cos(xrot) * Z1)
 0000013E 00A5A023                          mov     FMUL_5, FMUL_0, sin_thetaY      ; FMUL_5 = (sin(xrot) * X1)
                                            
 0000013F 0083A1A2                          mov     FADD_3, FMUL_1, FMUL_2          ; FADD_3 = (cos(yrot) * X1) + (sin(yrot) * Z1)
 00000140 0093A4A5                          mov     FSUB_3, FMUL_4, FMUL_5          ; FSUB_3 = (cos(yrot) * Z1) - (sin(yrot) * X1)
                                       ;vertex 2
                                            ; (cos(yrot) * X2) + (sin(yrot) * Z2) 
 00000141 00A7A324                          mov     FMUL_7, FMUL_3, cos_thetaY      ; FMUL_7 = (cos(yrot) * X2)
 00000142 00A88123                          mov     FMUL_8, FADD_1, sin_thetaY      ; FMUL_8 = (sin(yrot) * Z2)
                                            ; (cos(yrot) * Z2) - (sin(yrot) * X2)
 00000143 00A98124                          mov     FMUL_9, FADD_1, cos_thetaY      ; FMUL_9 = (cos(xrot) * Z2)
 00000144 00AAA323                          mov     FMUL_A, FMUL_3, sin_thetaY      ; FMUL_A = (sin(xrot) * X2)
                                            
 00000145 0084A7A8                          mov     FADD_4, FMUL_7, FMUL_8          ; FADD_4 = (cos(yrot) * X2) + (sin(yrot) * Z2)
 00000146 0094A9AA                          mov     FSUB_4, FMUL_9, FMUL_A          ; FSUB_4 = (cos(yrot) * Z2) - (sin(yrot) * X2)
                                            
                                       ;vertex 3
                                            ; (cos(yrot) * X3) + (sin(yrot) * Z3) 
 00000147 00ABA624                          mov     FMUL_B, FMUL_6, cos_thetaY      ; FMUL_B = (cos(yrot) * X3)
 00000148 00AC8223                          mov     FMUL_C, FADD_2, sin_thetaY      ; FMUL_C = (sin(yrot) * Z3)
                                            
                                            ; (cos(yrot) * Z3) - (sin(yrot) * X3)
 00000149 00AD8224                          mov     FMUL_D, FADD_2, cos_thetaY      ; FMUL_D = (cos(xrot) * Z3)
 0000014A 00AEA623                          mov     FMUL_E, FMUL_6, sin_thetaY      ; FMUL_E = (sin(xrot) * X3)
                                            
 0000014B 0085ABAC                          mov     FADD_5, FMUL_B, FMUL_C          ; FADD_5 = (cos(yrot) * X3) + (sin(yrot) * Z3)
 0000014C 0095ADAE                          mov     FSUB_5, FMUL_D, FMUL_E          ; FSUB_5 = (cos(yrot) * Z3) - (sin(yrot) * X3)  
                                            
                                ;           X1 is now in FADD_3
                                ;           Y1 is now in FSUB_0
                                ;           Z1 is now in FSUB_3
                                ;           X2 is now in FADD_4
                                ;           Y2 is now in FSUB_1
                                ;           Z2 is now in FSUB_4
                                ;           X3 is now in FADD_5
                                ;           Y3 is now in FSUB_2 
                                ;           Z3 is now in FSUB_5                      
                                
                                  ;rotate around Z axis
                                       ;vertex 1
                                            ; (cos(zrot) * X1) - (sin(zrot) * Y1) 
 0000014D 00A08326                          mov     FMUL_0, FADD_3, cos_thetaZ      ; FMUL_0 = (cos(zrot) * X1)
 0000014E 00A19025                          mov     FMUL_1, FSUB_0, sin_thetaZ      ; FMUL_1 = (sin(xrot) * Y1)
                                            ; (sin(zrot) * X1) + (cos(zrot) * Y1) 
 0000014F 00A28325                          mov     FMUL_2, FADD_3, sin_thetaZ      ; FMUL_2 = (sin(xrot) * X1)
 00000150 00A39026                          mov     FMUL_3, FSUB_0, cos_thetaZ      ; FMUL_3 = (cos(xrot) * Y1)
                                            
 00000151 0096A0A1                          mov     FSUB_6, FMUL_0, FMUL_1          ; FSUB_6 = (cos(zrot) * X1) - (sin(zrot) * Y1)
 00000152 0086A2A3                          mov     FADD_6, FMUL_2, FMUL_3          ; FADD_6 = (sin(zrot) * X1) + (cos(zrot) * Y1)
                                
                                       ;vertex 2
                                            ; (cos(zrot) * X2) - (sin(zrot) * Y2) 
 00000153 00A48426                          mov     FMUL_4, FADD_4, cos_thetaZ      ; FMUL_4 = (cos(zrot) * X1)
 00000154 00A59125                          mov     FMUL_5, FSUB_1, sin_thetaZ      ; FMUL_5 = (sin(xrot) * Y1)
                                            ; (sin(zrot) * X2) + (cos(zrot) * Y2) 
 00000155 00A68425                          mov     FMUL_6, FADD_4, sin_thetaZ      ; FMUL_6 = (sin(xrot) * X2)
 00000156 00A79126                          mov     FMUL_7, FSUB_1, cos_thetaZ      ; FMUL_7 = (cos(xrot) * Y2)
                                            
 00000157 0097A4A5                          mov     FSUB_7, FMUL_4, FMUL_5          ; FSUB_7 = (cos(zrot) * X2) - (sin(zrot) * Y2)
 00000158 0087A6A7                          mov     FADD_7, FMUL_6, FMUL_7          ; FADD_7 = (sin(zrot) * X2) + (cos(zrot) * Y2)
                                
                                       ;vertex 3
                                            ; (cos(zrot) * X3) - (sin(zrot) * Y3) 
 00000159 00A88526                          mov     FMUL_8, FADD_5, cos_thetaZ      ; FMUL_8 = (cos(zrot) * X3)
 0000015A 00A99225                          mov     FMUL_9, FSUB_2, sin_thetaZ      ; FMUL_9 = (sin(xrot) * Y3)
                                            ; (sin(zrot) * X3) + (cos(zrot) * Y3)   
 0000015B 00AA8525                          mov     FMUL_A, FADD_5, sin_thetaZ      ; FMUL_A = (sin(xrot) * X3)
 0000015C 00AB9226                          mov     FMUL_B, FSUB_2, cos_thetaZ      ; FMUL_B = (cos(xrot) * Y3)
                                            
 0000015D 0098A8A9                          mov     FSUB_8, FMUL_8, FMUL_9          ; FSUB_8 = (cos(zrot) * X3) - (sin(zrot) * Y3)
 0000015E 0088AAAB                          mov     FADD_8, FMUL_A, FMUL_B          ; FADD_8 = (sin(zrot) * X3) + (cos(zrot) * Y3)            
                                            
                                ;           X1 is now in FSUB_6
                                ;           Y1 is now in FADD_6
                                ;           Z1 is now in FSUB_3
                                ;           X2 is now in FSUB_7
                                ;           Y2 is now in FADD_7
                                ;           Z2 is now in FSUB_4
                                ;           X3 is now in FSUB_8
                                ;           Y3 is now in FADD_8
                                ;           Z3 is now in FSUB_5
                                       
                                    ;now translate on X, Y, Z axis
                                        ;vertex 1
 0000015F 0080962A                          mov     FADD_0, FSUB_6, transX     
 00000160 0081862B                          mov     FADD_1, FADD_6, transY     
 00000161 0082932C                          mov     FADD_2, FSUB_3, transZ     
                                        ;vertex 2
 00000162 0089972A                          mov     FADD_9, FSUB_7, transX     
 00000163 008A872B                          mov     FADD_A, FADD_7, transY     
 00000164 008B942C                          mov     FADD_B, FSUB_4, transZ     
                                        ;vertex 3
 00000165 008C982A                          mov     FADD_C, FSUB_8, transX     
 00000166 008D882B                          mov     FADD_D, FADD_8, transY     
 00000167 008E952C                          mov     FADD_E, FSUB_5, transZ     
                                
                                    ;copy results of transformation back to original locations in PDB
 00000168 007A8000                          mov     *AR2++, FADD_0          ;copy translated X1 to PDB
 00000169 007A8100                          mov     *AR2++, FADD_1          ;copy translated Y1 to PDB
 0000016A 007A8200                          mov     *AR2++, FADD_2          ;copy translated Z1 to PDB
 0000016B 007A8900                          mov     *AR2++, FADD_9          ;copy translated X2 to PDB
 0000016C 007A8A00                          mov     *AR2++, FADD_A          ;copy translated Y2 to PDB
 0000016D 007A8B00                          mov     *AR2++, FADD_B          ;copy translated Z2 to PDB
 0000016E 007A8C00                          mov     *AR2++, FADD_C          ;copy translated X3 to PDB
 0000016F 007A8D00                          mov     *AR2++, FADD_D          ;copy translated Y3 to PDB
 00000170 007A8E00                          mov     *AR2++, FADD_E          ;copy translated Z3 to PDB
                                            
 00000171 04AF0F68                          dbnz    loop, LPCNT0            ;continue until done
                                
 00000172 306F0108                          mov     PC, #done               ;jump to done, semphr test and spin for next packet
                                            
                                ; interrupt service routines        
 00000173 00016E00              NMI_:       mov     NMI_save, PC_COPY       ;save return address from non-maskable interrupt (time-out timer in this instance)
 00000174 30672710                          mov     TIMER, #10000           ;put a new value in the timer
 00000175 006F0100                          mov     PC, NMI_save            ;return from interrupt
                                        
 00000176 00026E00              INV_:       mov     INV_save, PC_COPY       ;save return address from floating-point invalid operation exception, which is maskable
 00000177 30672710                          mov     TIMER, #10000           ;put a new value in the timer
 00000178 0019D100                          mov     work_6, SQRT_1          ;retrieve the NaN with payload (this quiet NaN replaced the signaling NaN that caused the INV exc)
 00000179 006F0200                          mov     PC, INV_save            ;return from interrupt
                                            
 0000017A 00036E00              DIVx0_:     mov     DIVx0_save, PC_COPY     ;save return address from floating-point divide by 0 exception, which is maskable
 0000017B 001A6000                          mov     capt0_save, CAPTURE0    ;read out CAPTURE0 register and save it
 0000017C 001B6100                          mov     capt1_save, CAPTURE1    ;read out CAPTURE1 register and save it
 0000017D 001C6200                          mov     capt2_save, CAPTURE2    ;read out CAPTURE2 register and save it
 0000017E 001D6300                          mov     capt3_save, CAPTURE3    ;read out CAPTURE3 register and save it
 0000017F 30672710                          mov     TIMER, #10000           ;put a new value in the timer
 00000180 006F0300                          mov     PC, DIVx0_save          ;return from interrupt
                                
 00000181 00046E00              OVFL_:      mov     OVFL_save, PC_COPY      ;save return address from floating-point overflow exception, which is maskable
 00000182 30672710                          mov     TIMER, #10000           ;put a new value in the timer
 00000183 006F0400                          mov     PC, OVFL_save           ;return from interrupt
                                
 00000184 00056E00              UNFL_:      mov     UNFL_save, PC_COPY      ;save return address from floating-point underflow exception, which is maskable
 00000185 30672710                          mov     TIMER, #10000           ;put a new value in the timer
 00000186 006F0500                          mov     PC, UNFL_save           ;return from interrupt
                                
 00000187 00066E00              INEXT_:     mov     INEX_save, PC_COPY      ;save return address from floating-point inexact exception, which is maskable
 00000188 30672710                          mov     TIMER, #10000           ;put a new value in the timer
 00000189 006F0600                          mov     PC, INEX_save           ;return from interrupt
                                
 0000018A 00076E00              IRQ_:       mov     IRQ_PC_save, PC_COPY    ;save return address (general-purpose, maskable interrupt)
 0000018B 30672710                          mov     TIMER, #10000           ;put a new value in the timer
 0000018C 006F0700                          mov     PC, IRQ_PC_save         ;return from interrupt            
 0000018D                       progend:        
 00000000                                   end
00000070  AR0                00000071  AR1                00000072  AR2                
00000073  AR3                0000001A  CAPT0_SAVE         0000001B  CAPT1_SAVE         
0000001C  CAPT2_SAVE         0000001D  CAPT3_SAVE         00000060  CAPTURE0           
00000061  CAPTURE1           00000062  CAPTURE2           00000063  CAPTURE3           
000000FE  CONSTANTS          00000022  COS_THETAX         00000024  COS_THETAY         
00000026  COS_THETAZ         0000006A  C_REG              0000017A  DIVX0_             
00000003  DIVX0_SAVE         00000103  DIVX0_VECT         00000108  DONE               
00000020  DONE_BIT           00000065  DOT                000000F8  EXP_0              
000000F9  EXP_1              000000FA  EXP_2              000000FB  EXP_3              
000000FC  EXP_4              000000FD  EXP_5              000000FE  EXP_6              
000000FF  EXP_7              00000080  FADD_0             00000081  FADD_1             
00000082  FADD_2             00000083  FADD_3             00000084  FADD_4             
00000085  FADD_5             00000086  FADD_6             00000087  FADD_7             
00000088  FADD_8             00000089  FADD_9             0000008A  FADD_A             
0000008B  FADD_B             0000008C  FADD_C             0000008D  FADD_D             
0000008E  FADD_E             0000008F  FADD_F             000000C0  FDIV_0             
000000C1  FDIV_1             000000C2  FDIV_2             000000C3  FDIV_3             
000000C4  FDIV_4             000000C5  FDIV_5             000000C6  FDIV_6             
000000C7  FDIV_7             000000C8  FDIV_8             000000C9  FDIV_9             
000000CA  FDIV_A             000000CB  FDIV_B             000000CC  FDIV_C             
000000CD  FDIV_D             000000CE  FDIV_E             000000CF  FDIV_F             
00000008  FGS_SAVE           000000E0  FMA_0              000000E1  FMA_1              
000000E2  FMA_2              000000E3  FMA_3              000000E4  FMA_4              
000000E5  FMA_5              000000E6  FMA_6              000000E7  FMA_7              
000000E8  FMA_8              000000E9  FMA_9              000000EA  FMA_A              
000000EB  FMA_B              000000EC  FMA_C              000000ED  FMA_D              
000000EE  FMA_E              000000EF  FMA_F              000000A0  FMUL_0             
000000A1  FMUL_1             000000A2  FMUL_2             000000A3  FMUL_3             
000000A4  FMUL_4             000000A5  FMUL_5             000000A6  FMUL_6             
000000A7  FMUL_7             000000A8  FMUL_8             000000A9  FMUL_9             
000000AA  FMUL_A             000000AB  FMUL_B             000000AC  FMUL_C             
000000AD  FMUL_D             000000AE  FMUL_E             000000AF  FMUL_F             
00000090  FSUB_0             00000091  FSUB_1             00000092  FSUB_2             
00000093  FSUB_3             00000094  FSUB_4             00000095  FSUB_5             
00000096  FSUB_6             00000097  FSUB_7             00000098  FSUB_8             
00000099  FSUB_9             0000009A  FSUB_A             0000009B  FSUB_B             
0000009C  FSUB_C             0000009D  FSUB_D             0000009E  FSUB_E             
0000009F  FSUB_F             000000B8  FTOI_0             000000B9  FTOI_1             
000000BA  FTOI_2             000000BB  FTOI_3             000000BC  FTOI_4             
000000BD  FTOI_5             000000BE  FTOI_6             000000BF  FTOI_7             
00000187  INEXT_             00000106  INEXT_VECT         00000006  INEX_SAVE          
00000176  INV_               00000002  INV_SAVE           00000102  INV_VECT           
0000018A  IRQ_               00000007  IRQ_PC_SAVE        00000107  IRQ_VECT           
000000B0  ITOF_0             000000B1  ITOF_1             000000B2  ITOF_2             
000000B3  ITOF_3             000000B4  ITOF_4             000000B5  ITOF_5             
000000B6  ITOF_6             000000B7  ITOF_7             000000F0  LOG_0              
000000F1  LOG_1              000000F2  LOG_2              000000F3  LOG_3              
000000F4  LOG_4              000000F5  LOG_5              000000F6  LOG_6              
000000F7  LOG_7              00000120  LOOP               00000068  LPCNT0             
00000069  LPCNT1             00000173  NMI_               00000001  NMI_SAVE           
00000101  NMI_VECT           00000181  OVFL_              00000004  OVFL_SAVE          
00000104  OVFL_VECT          00000800  PACKET             0000006F  PC                 
0000006E  PC_COPY            0000018D  PROGEND            000000FF  PROG_LEN           
00000066  QOS                00000064  RPT                00000100  RST_VECT           
00000027  SCALEX             00000028  SCALEY             00000029  SCALEZ             
0000006C  SCHED              0000006B  SCHEDCMP           00000109  SEMPHR             
0000001E  SIGN_MASK          00000021  SIN_THETAX         00000023  SIN_THETAY         
00000025  SIN_THETAZ         0000010A  SPIN               000000D0  SQRT_0             
000000D1  SQRT_1             000000D2  SQRT_2             000000D3  SQRT_3             
000000D4  SQRT_4             000000D5  SQRT_5             000000D6  SQRT_6             
000000D7  SQRT_7             000000D8  SQRT_8             000000D9  SQRT_9             
000000DA  SQRT_A             000000DB  SQRT_B             000000DC  SQRT_C             
000000DD  SQRT_D             000000DE  SQRT_E             000000DF  SQRT_F             
0000010E  START              0000006D  STATUS             00000067  TIMER              
0000002A  TRANSX             0000002B  TRANSY             0000002C  TRANSZ             
00000020  TRIANGLES          00000184  UNFL_              00000005  UNFL_SAVE          
00000105  UNFL_VECT          00000014  WORK_1             00000015  WORK_2             
00000016  WORK_3             00000017  WORK_4             00000018  WORK_5             
00000019  WORK_6             
