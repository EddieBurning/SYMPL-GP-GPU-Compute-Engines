                                ;-------------------------------------------------------------------------------------------
                                ; RISC-V (VASCALE RTL version) with SYMPL GP-GPU demo program written in pure assembly
                                ; Version 1.01  December 10, 2015
                                ; Author:  Jerry D. Harthcock
                                ; Original version December 6, 2015
                                ; Assembled using Cross-32 Universal Cross-Assembler and custom instruction table
                                ; The RSIC-V (RV-32I) instruction table is included in the non-commercial distribution package.
                                ; Copyright (c) 2015. All rights reserved.
                                ;
                                ; DESCRIPTION
                                ; RISC-V  executes this program to push 3D transformation parameters, triangle count, and 
                                ; triangle xyz vertices(all extracted from a .stl file by the test bench) into the SYMPL GP-GPU  
                                ; datapool memory and then issues a command to the coarse-grained scheduler (CGS) of the 
                                ; GP-GPU to perform the 3D transformation according the parameters submitted.  Parameters include 
                                ; scale, rotate, and translate on all three axis.
                                ;
                                ; After submitting the parameters, triangle count, triangles and command, the RISC-V simply
                                ; polls the semaphore location in GP-GPU datapool memory waiting for the "C001FEED" response,
                                ; which tells the RISC-V that processing has been completed.  Once such response is issued,
                                ; the RISC-V then pulls the results from the GP-GPU datapool back into its system memory space.
                                ;
                                ; The test bench detects that processing is complete when when the RISC-V writes "C001FEED" to
                                ; location 0x8000 (32-bit aligned) in its system memory.  Once detected the test bench then 
                                ; pulls the results from RISC-V system memory and writes the results to disk in .stl format
                                ; so the transformed 3D object can be displayed using any .stl file viewer.
                                ;
                                ; It should be noted that the VSCALE RTL version of RISC-V, as of this writting, appears to 
                                ; have a bug in the pipeline logic, as some patches in this assembly code were necessary  
                                ; to get the VSCALE to generate a write in certain situations where the data memory
                                ; write signal appears to be killed pre-maturely.
                                ;
                                ; A copy of Cross-32 can be purchased from:
                                ; Data-Sync Engineering at: http://www.cdadapter.com/cross32.htm  sales@datasynceng.com
                                ; A copy of the Cross-32 manual can be viewed online here:  
                                ;          http://www.cdadapter.com/download/cross32.pdf
                                
 00000000                                  CPU  "RISC_V.tbl"
 00000000                                  HOF "BIN32"
 00000000                                  WDLN 1
                                
 0000010B         =             transform:  equ     0x10B                 ;transform command issued to CGS (GP-GPU)
                                
 00000200                                   org 0x00000200
 00000200 38000093              start:      mvi     x1, stl_tri_count     ;load pointer to pointer for triangle count into x1
 00000204 0000A083                          lw      x1,  0(x1)            ;load x1 with pointer to triangle count
 00000208 0000A183                          lw      x3,  0(x1)            ;get triangle count
 0000020C 00018F93                          mv      x31, x3               ;save original triangle count in x31
                                            
                                ;----------------- push parameters for the 3D transform -------------------------------------        
 00000210 38C00113                          mvi     x2, dpool_tri_count   ;load pointer to pointer for storing triangle count in GP-GPU datapool
 00000214 00012103                          lw      x2, 0(x2)             ;get pointer to where triangle count will be stored in datapool
 00000218 01F12023                          sw      0(x2), x31            ;store triangle count in datapool
                                        
 0000021C 3B800213                          mvi     x4, parameters        ;get pointer to parameters 
 00000220 00022283                          lw      x5, 0(x4)             ;get rotate x amount parameter 
 00000224 00512223                          sw      4(x2), x5             ;store rotate x amount in datapool
 00000228 00422283                          lw      x5, 4(x4)             ;get rotate y amount
 0000022C 00512423                          sw      8(x2), x5             ;store rotate y amount in datapool
 00000230 00822283                          lw      x5, 8(x4)             ;get rotate z amount
 00000234 00512623                          sw      12(x2), x5            ;store rotate z amount in datapool
                                        
 00000238 00C22283                          lw      x5, 12(x4)            ;get scale x amount
 0000023C 00512823                          sw      16(x2), x5            ;store scale x amount in datapool
 00000240 01022283                          lw      x5, 16(x4)            ;get scale y amount
 00000244 00512A23                          sw      20(x2), x5            ;store scale y amount in datapool
 00000248 01422283                          lw      x5, 20(x4)            ;get scale z amount
 0000024C 00512C23                          sw      24(x2), x5            ;store scale z amount in datapool
                                        
 00000250 01822283                          lw      x5, 24(x4)            ;get translate x amount
 00000254 00512E23                          sw      28(x2), x5            ;store translate x amount in datapool
 00000258 01C22283                          lw      x5, 28(x4)            ;get translate y amount
 0000025C 02512023                          sw      32(x2), x5            ;store translate y amount in datapool
 00000260 02022283                          lw      x5, 32(x4)            ;get translate z amount
 00000264 02512223                          sw      36(x2), x5            ;store translate y amount in datapool
                                            
                                ;----------------- push triangles --------------------------------------------------        
                                ;push triangles section copies triangles from RISC-V memory over to datapool         
 00000268 38400093                          mvi     x1, stl_first_tri     ;load pointer to pointer for first triangle in RISC-V .stl memory buf
 0000026C 0000A083                          lw      x1,  0(x1)            ;get pointer to first triangle in RISC-V .stl memory buf
 00000270 3B400113                          mvi     x2, dpool_frst_tri    ;get point to pointer for first triangle x1 storage location in datapool
 00000274 00012103                          lw      x2, 0(x2)             ;x2 is now pointing to where first x1 will be stored in datapool
                                
 00000278 0000A283              push_xyz1:  lw      x5, 0(x1)             ;get x1 .stl buf
 0000027C 00512023                          sw      0(x2), x5             ;store x1 in datapool
 00000280 0040A283                          lw      x5, 4(x1)             ;get y1 .stl buf
 00000284 00512223                          sw      4(x2), x5             ;store y1 in datapool
 00000288 0080A283                          lw      x5, 8(x1)             ;get z1 .stl buf
 0000028C 00512423                          sw      8(x2), x5             ;store z1 in datapool
                                
 00000290 00C0A283              push_xyz2:  lw      x5, 12(x1)            ;get x2 .stl buf
 00000294 00512623                          sw      12(x2), x5            ;store x2 in datapool
 00000298 0100A283                          lw      x5, 16(x1)            ;get y2 .stl buf
 0000029C 00512823                          sw      16(x2), x5            ;store y2 in datapool
 000002A0 0140A283                          lw      x5, 20(x1)            ;get z2 .stl buf
 000002A4 00512A23                          sw      20(x2), x5            ;store z2 in datapool
                                
 000002A8 0180A283              push_xyz3:  lw      x5, 24(x1)            ;get x3 .stl buf
 000002AC 00512C23                          sw      24(x2), x5            ;store x3 in datapool
 000002B0 01C0A283                          lw      x5, 28(x1)            ;get y3 .stl buf
 000002B4 00512E23                          sw      28(x2), x5            ;store y3 in datapool
 000002B8 0200A283                          lw      x5, 32(x1)            ;get z3 .stl buf
 000002BC 02512023                          sw      32(x2), x5            ;store z3 in datapool
                                
 000002C0 02408093                          addi    x1, x1, 36            ;point to next triangle x1 in RISC-V memory
 000002C4 02410113                          addi    x2, x2, 36            ;point to next triangle destination location where vector will be written in datapool
 000002C8 FFF18193                          decr    x3                    ;decrement triangle count
 000002CC FA0196E3                          bnz     x3, push_xyz1         ;if not zero then push next triangle, else give command to GP-GPU to transform 3D object
                                            
                                ;--------------- issue 3D transform command -------------------------------------------------- 
                                ;note: the last 3 instruction are a patch.  If not included RISC-V appears to kill the write of the command.         
 000002D0 38800313              giv_cmnd:   mvi     x6, dpool_command     ;get pointer to pointer to datapool command register
 000002D4 00032303                          lw      x6, 0(x6)             ;x6 now has pointer to datapool command register
 000002D8 10B00393                          mvi     x7, transform         ;load x7 with command telling GP-GPU to transform the 3D object according to the parameters given
 000002DC 00732023                          sw      0(x6), x7             ;place the transform command into the GP-GPU command buffer
 000002E0 00032A03                          lw      x20, 0(x6)            ;dummy ld 
 000002E4 00732023                          sw      0(x6), x7             ;place the transform command into the GP-GPU command buffer
 000002E8 00732023                          sw      0(x6), x7             ;place the transform command into the GP-GPU command buffer
                                                       
                                ;--------------- pull results preparation ----------------------------------------------------
 000002EC 38400113                          mvi     x2, stl_first_tri     ;point to pointer for location in RISC-V memory to read first triangle x1 transformed result
 000002F0 00012103                          lw      x2, 0(x2)             ;get the pointer
 000002F4 3B400093                          mvi     x1, dpool_frst_tri    ;point to pointer for location in GP-GPU datapool to store first triangle x1 transformed result        
 000002F8 0000A083                          lw      x1, 0(x1)             ;get the pointer
 000002FC 3DC00213                          mvi     x4, cool_feed         ;get pointer to cool_feed response value to be used as semaphore
 00000300 00022203                          lw      x4, 0(x4)             ;load x4 with 0xC001_FEED
 00000304 000F8193                          mv      x3, x31               ;load loop counter x3 with number of triangles previously saved
                                                                          
                                ;--------------- wait for the GP-GPU to complete transformation ------------------------------
 00000308 00032383               wait:      lw      x7, 0(x6)             ;read command register and see if CGS responded with the "C001FEED" semaphore
 0000030C FE721EE3                          bne     x4, x7, wait
                                            
                                ;--------------- pull results from datapool and place in original RISC-V .stl file buffer ----
 00000310 0000A283              pull_xyz1:  lw      x5, 0(x1)             ;get x1  from datapool
 00000314 00512023                          sw      0(x2), x5             ;store x1 in .stl buf            
 00000318 0040A283                          lw      x5, 4(x1)             ;get y1 from datapool
 0000031C 00512223                          sw      4(x2), x5             ;store y1 in .stl buf
 00000320 0080A283                          lw      x5, 8(x1)             ;get z1 from datapool
 00000324 00512423                          sw      8(x2), x5             ;store z1 in .stl buf
                                
 00000328 00C0A283              pull_xyz2:  lw      x5, 12(x1)            ;get x2 from datapool
 0000032C 00512623                          sw      12(x2), x5            ;store x2 in .stl buf
 00000330 0100A283                          lw      x5, 16(x1)            ;get y2 from datapool
 00000334 00512823                          sw      16(x2), x5            ;store y2 in .stl buf
 00000338 0140A283                          lw      x5, 20(x1)            ;get z2 from datapool
 0000033C 00512A23                          sw      20(x2), x5            ;store z2 in .stl buf
                                
 00000340 0180A283              pull_xyz3:  lw      x5, 24(x1)            ;get x3 from datapool
 00000344 00512C23                          sw      24(x2), x5            ;store x3 in .stl buf
 00000348 01C0A283                          lw      x5, 28(x1)            ;get y3 from datapool
 0000034C 00512E23                          sw      28(x2), x5            ;store y3 in .stl buf
 00000350 0200A283                          lw      x5, 32(x1)            ;get z3 from datapool
 00000354 02512023                          sw      32(x2), x5            ;store z3 in .stl buf
                                
 00000358 02408093                          addi    x1, x1, 36            ;update pointer to next triangle x1 starting location in GP-GPU datapool
 0000035C 02410113                          addi    x2, x2, 36            ;update pointer to where the vector will be written in RISC-V memory
 00000360 FFF18193                          decr    x3                    ;decrement triangle count
 00000364 FA0196E3                          bnz     x3, pull_xyz1         ;if done pushing, give command
                                            
 00000368 37C00513                          mvi      x10, stl_file        ;get pointer to pointer to start of .stl file
 0000036C 00052503                          lw       x10, 0(x10)          ;point to .stl file first location
 00000370 00452023                          sw       0(x10), x4           ;store coo1_feed semaphore there to signal done
 00000374 00052203              done:       lw       x4, 0(x10)           ;read back to expose coo1_feed semaphore for easy test bench detection
 00000378 FE000EE3                          bra     done                  ;spin here when done
                                            
 0000037C                                         org $
                                ;pointer table for data memory access to ("filtered") .stl file in RISC-V memory 
 0000037C 00020000              stl_file: 	      dfl 0x00020000     ;pointer (byte address) to the start of the .stl file that has been loaded into data memory
 00000380 00020004              stl_tri_count:    dfl 0x00020004     ;pointer (byte address) to location in .stl file containing number of triangles in the file
 00000384 0002002C              stl_first_tri:    dfl 0x0002002C     ;pointer (byte address) to first x1 in first triangle vector, i.e., (x1, y1, z1, x2, y2, z2, x3, y3, z3)
                                
                                ;pointer table for data memory access to GP-GPU datapool memory which is also mapped (via true dual-port SRAM) to RISC-V memory
 00000388 00040000              dpool_command:    dfl 0x00040000     ;pointer to the command register of the GP-GPU 64k-word (256k byte) data pool
 0000038C 00040004              dpool_tri_count:  dfl 0x00040004     ;pointer to where the triangle count will be written to the GP-GPU datapool
 00000390 00040008              dpool_scalx:      dfl 0x00040008     ;pointer to where the scalx parameter will be written to the GP-GPU datapool
 00000394 0004000C              dpool_scaly:      dfl 0x0004000C     ;pointer to scaly data pool address
 00000398 00040010              dpool_scalz:      dfl 0x00040010     ;pointer to scalz 
 0000039C 00040014              dpool_rotx:       dfl 0x00040014     ;pointer to rotate x amount (in integer degrees)
 000003A0 00040018              dpool_roty:       dfl 0x00040018     ;pointer to rotate y amount
 000003A4 0004001C              dpool_rotz:       dfl 0x0004001C     ;pointer to rotate z amount
 000003A8 00040020              dpool_transx:     dfl 0x00040020     ;pointer to translate x amount
 000003AC 00040024              dpool_transy:     dfl 0x00040024     ;pointer to translate y amount
 000003B0 00040028              dpool_transz:     dfl 0x00040028     ;pointer to translate z amount
 000003B4 0004002C              dpool_frst_tri:   dfl 0x0004002C     ;pointer to the first x1 of first vertex in the data pool
                                
                                ;parameters for this particular 3D transform test run
 000003B8                       parameters:       org  $
 000003B8 0000001D              rotx:             dfl  29            ;rotate around x axis in integer degrees  
 000003BC 0000002C              roty:             dfl  44            ;rotate around y axis in integer degrees  
 000003C0 0000004B              rotz:             dfl  75            ;rotate around z axis in integer degrees  
 000003C4 40000000              scalx:            dff  2.0           ;scale X axis amount real
 000003C8 40000000              scaly:            dff  2.0           ;scale y axis amount real
 000003CC 40100000              scalz:            dff  2.25          ;scale Z axis amount real
 000003D0 40980000              transx:           dff  4.75          ;translate on X axis amount real
 000003D4 4077AE14              transy:           dff  3.87          ;translate on Y axis amount real
 000003D8 400F2B02              transz:           dff  2.237         ;translate on Z axis amount real
                                
                                ;GP-GPU reply semaphors
 000003DC C001FEED              cool_feed:        dfl  0xC001FEED    ;this response indicates GP-GPU has completed the task successfully
 000003E0 0BADFEED              bad_feed:         dfl  0x0BADFEED    ;this response indicates GP-GPU has terminated the task prematurely for the reason specified in the response buffer
                                
                                
 00000000                               end
000003E0  BAD_FEED           000003DC  COOL_FEED          00000374  DONE               
00000388  DPOOL_COMMAND      000003B4  DPOOL_FRST_TRI     0000039C  DPOOL_ROTX         
000003A0  DPOOL_ROTY         000003A4  DPOOL_ROTZ         00000390  DPOOL_SCALX        
00000394  DPOOL_SCALY        00000398  DPOOL_SCALZ        000003A8  DPOOL_TRANSX       
000003AC  DPOOL_TRANSY       000003B0  DPOOL_TRANSZ       0000038C  DPOOL_TRI_COUNT    
000002D0  GIV_CMND           000003B8  PARAMETERS         00000310  PULL_XYZ1          
00000328  PULL_XYZ2          00000340  PULL_XYZ3          00000278  PUSH_XYZ1          
00000290  PUSH_XYZ2          000002A8  PUSH_XYZ3          000003B8  ROTX               
000003BC  ROTY               000003C0  ROTZ               000003C4  SCALX              
000003C8  SCALY              000003CC  SCALZ              00000200  START              
0000037C  STL_FILE           00000384  STL_FIRST_TRI      00000380  STL_TRI_COUNT      
0000010B  TRANSFORM          000003D0  TRANSX             000003D4  TRANSY             
000003D8  TRANSZ             00000308  WAIT               
