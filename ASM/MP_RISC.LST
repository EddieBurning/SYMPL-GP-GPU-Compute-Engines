 00000000                                  CPU  "SYMPL_IL.TBL"
 00000000                                  HOF  "MOT32"
 00000000                                  WDLN 4
                                ; CGS FP3211 test1
                                ; version 1.01   Nov 29, 2015
                                ; Author:  Jerry D. Harthcock
                                ; Copyright (C) 2015.  All rights reserved without prejudice.
                                           
                                ;--------------------------------------------------------------------------           
                                ;         internal memory-mapped h/w registers
                                ;--------------------------------------------------------------------------
 00000073         =             AR3:            EQU     0x73                    ;Auxiliary Reg 3
 00000072         =             AR2:            EQU     0x72                    ;Auxiliary Reg 2
 00000071         =             AR1:            EQU     0x71                    ;Auxiliary Reg 1
 00000070         =             AR0:            EQU     0x70                    ;Auxiliary Reg 0
 0000006F         =             PC:             EQU     0x6F                    ;Program Counter
 0000006E         =             PC_COPY:        EQU     0x6E
 0000006D         =             STATUS:         EQU     0x6D                    ;Statis Register
 0000006C         =             RPT:            EQU     0x6C                    ;repeat counter location
 0000006B         =             SPSH:           EQU     0x6B                    ;stack push
 0000006A         =             SPOP:           EQU     0x6A                    ;stack pop
 00000069         =             SNOP:           EQU     0x69                    ;stack read or write without SP modification
 00000068         =             SP:             EQU     0x68
 00000067         =             LPCNT1:         EQU     0x67                    ;H/W loop counter 1
 00000066         =             LPCNT0:         EQU     0x66                    ;H/W loop counter 0
 00000065         =             TIMER:          EQU     0x65                    ;timer
 00000064         =             CREG:           EQU     0x64                    ;CREG for FMA and DOT
 00000063         =             CAPTURE3:       EQU     0x63                    ;alternate delayed exception capture register 3
 00000062         =             CAPTURE2:       EQU     0x62                    ;alternate delayed exception capture register 2
 00000061         =             CAPTURE1:       EQU     0x61                    ;alternate delayed exception capture register 1
 00000060         =             CAPTURE0:       EQU     0x60                    ;alternate delayed exception capture register 0
 0000005F         =             INTEN:          EQU     0x5F                    ;IRQ_in[15:0] (first 16 MSBs) & interrupt enable register (lower 16 LSBs)
 0000005E         =             DMA0_CSR:       EQU     0x5E                    ;DMA_Done is DMAn_CSR[21], interrupt enable is DMAn_CSR[20], 20-bit count value {DMAn_CSR[19:0]}
 0000005D         =             DMA0_RDADDRS:   EQU     0x5D                    ;DMA0 reads from DataPool
 0000005C         =             DMA0_WRADDRS:   EQU     0x5C                    ;DMA0 writes to GPU
 0000005B         =             VECTOR:         EQU     0x5B                    ;2 MSBs contain GPU count and 4 LSBs contain interrupt vector offset
                                
                                ;zero-page storage
 00000001         =             work_1:         EQU     0x01                    
 00000002         =             work_2:         EQU     0x02
 00000003         =             work_3:         EQU     0x03
 00000004         =             work_4:         EQU     0x04
 00000005         =             work_5:         EQU     0x05
 00000006         =             capt0_save:     EQU     0x06                    ;alternate delayed exception capture register 0 save location
 00000007         =             capt1_save:     EQU     0x07                    ;alternate delayed exception capture register 1 save location
 00000008         =             capt2_save:     EQU     0x08                    ;alternate delayed exception capture register 2 save location
 00000009         =             capt3_save:     EQU     0x09                    ;alternate delayed exception capture register 3 save location
 0000000A         =             src_save:       EQU     0x0A                    ;used to save source pointer
 0000000B         =             triDivXn:       EQU     0x0B                    ;number of triangles per quad-shader GPU, not counting remainder
 0000000C         =             remndr:         EQU     0x0C                    ;remainder of total triangles/n threads, must add one additional triangle to 
                                                                                ;the triangles/n amount for each thread until the remainder runs out
 0000000D         =             GPUs:           EQU     0x0D                    ;this location will contain the initial number of quad-shader GPUs available for this implementation                                                
                                                                                
 0000000E         =             sign_mask:      EQU     0x0E                    ;0x80000000 goes here--used for setting, clearing, toggling sign bit
                                
                                ;for storage of parameters for 3D transform
 0000000F         =             triangles:      EQU     0x0F                    ;total number of triangles to process
                                
 0000010B         =             XFORM_XYZ:      EQU     0x010B                  ;this is the command to issue to the GPU to execute from                        
                                                                                ;to carry out the 3D transform on all three axis, which includes                
                                                                                ;scale_xyz, rotate_xyz, translate_xyz                                           
                                                                                                                                                                
                                ;constant immediate value equates
 00000020         =             DONE_BIT:       EQU     0x20                    ;bit [5] is DONE Bit in status register 
                                
                                
 00800000         =             offset:         EQU     0x00800000              ;offset needed to access program memory space decode
                                
 00000000                                       org     0x00000000              ;program memory starts here
 00000000 F0FFFFFF              CLRgpuRSTmask:  dfl     0xF0FFFFFF              ;use this mask to clear all four GPU resets
                                
 00000001 0080015F              datapool_list:  dfl     GPU0_datapool + offset  ;pointer to first GPU datapool
 00000002 00800163              firstTri_list:  dfl     FIRSTtriGPU0 + offset   ;pointer to first GPU first triangle
                                              
                                ;pointer table for data memory access to ("filtered") .stl file in program/data memory
 00000003 00800200              stl_file: 	    dfl     stl_start + offset      ;pointer to the start of the .stl file that has been loaded into program/data memory
 00000004 00800202              trans_param:    dfl     parameters + offset     ;pointer to parameters for this particular 3D transform
 00000005 00800201              stl_tri_count:  dfl     tri_count + offset      ;pointer to location in .stl file containing number of triangles in the file
 00000006 0080020B              stl_first_tri:  dfl     first_tri + offset      ;pointer to first x1 in first triangle vector, i.e., (x1, y1, z1, x2, y2, z2, x3, y3, z3)
                                            
 000000FE                                   org     0x0FE              
                                
 000000FE 00000108              Constants:  DFL     start                       ;program memory locations 0x000 - 0x0FF reserved for look-up table
                                        
 000000FF 0000010D              prog_len:   DFL     progend - Constants
                                              
                                ;           func    dest, srcA, srcB 
                                
 00000100                                   org     0x00000100
 00000100 306F0108              RST_VECT:   mov     PC, #start              ;reset vector
 00000101 306F0145              NMI_VECT:   mov     PC, #NMI_               ;NMI vector
 00000102 306F0148              INV_VECT:   mov     PC, #INV_               ;invalid operation exception vector location
 00000103 306F014C              DIVx0_VECT: mov     PC, #DIVx0_             ;divide by 0 exception vector location
 00000104 306F0153              OVFL_VECT:  mov     PC, #OVFL_              ;overflow exception vector location
 00000105 306F0156              UNFL_VECT:  mov     PC, #UNFL_              ;underflow exception vector location
 00000106 306F0159              INEXT_VECT: mov     PC, #INEXT_             ;inexact exception vector location
 00000107 306F015C              IRQ_VECT:   mov     PC, #IRQ_               ;maskable general-purpose interrupt vector
                                
 00000108                       start:     
                                            
                                    ;entry point to the 3D transform CGS routine                
                                    ;determine number of threads available
 00000108 20700005                          mov     AR0, @stl_tri_count             ;load AR0 with pointer to total number of triangles to process
 00000109 20710001                          mov     AR1, @datapool_list             ;load AR1 with pointer to pointer to first location of GPU0 datapool (from the list)
 0000010A 30659C40                          mov     TIMER, #40000                   ;load time-out timer with sufficient time to get the job done 
 0000010B 136D6D20                          xor     STATUS, STATUS, #DONE_BIT       ;clear CPU done bit to signal test bench processing has started
 0000010C 000F7400                          mov     triangles, *AR0                 ;get total triangle count and save in "triangles" and update AR0 to point to rotX in parameter list 
 0000010D 200A0006                          mov     src_save, @stl_first_tri        ;initialize src_save with pointer to first source triangle X1 location
 0000010E 0404535F              is_it_4:    btbc    is_it_2, 19, INTEN              ;test done bit for GPU3.  If==1 then 4 GPUs (16 shaders) avialable 
 0000010F 300D0004                          mov     GPUs, #4
 00000110 050B0F41                          shft    triDivXn, triangles, RIGHT, 2   ;divide total triangles x4 to determine number of triangles per GPU
 00000111 04071F6D                          bcnd    initialize, ALWAYS          
 00000112 0404515F              is_it_2:    btbc    its_1, 17, INTEN                ;test done bit for GPU2.   If==1 then 2 GPUs (8 shaders) available.
 00000113 300D0002                          mov     GPUs, #2                 
 00000114 050B0F40                          shft    triDivXn, triangles, RIGHT, 1   ;divide total triangles x2 to determine number of triangles per GPU
 00000115 04031F6D                          bcnd    initialize, ALWAYS          
 00000116 300D0001              its_1:      mov     GPUs, #1                        ;else there is only one GPU (4 shaders) available
 00000117 000B0F00                          mov     triDivXn, triangles             
 00000118 00660D00              initialize: mov     LPCNT0, GPUs                    ;load loop counter 0 with number of GPUs that need to be passed parameters and data
 00000119 0A020B0D                          mul     work_2, triDivXn, GPUs          ;multiply result to get integer multiple
 0000011A 216D006D                          and     STATUS, @CLRgpuRSTmask, STATUS  ;clear GPU3, 2, 1, 0 reset lines
 0000011B 080C0F02                          sub     remndr, triangles, work_2       ;get remainder to be distributied one additional triangle per GPU until remainder depleated
 0000011C 00030C00                          mov     work_3, remndr                  ;save original remainder 
                                                                 
 0000011D 20700004              xferLoop:   mov     AR0, @trans_param               ;load AR0 with pointer to parameter list
 0000011E 16727501                          add     AR2, *AR1, #1                   ;load AR2 with pointer to current datapool (+1) to receive the transfer of parameters and data
                                                                                    ;so that AR2 is pointing to triangle count for that thread's datapool 
 0000011F 00010B00                          mov     work_1, triDivXn                ;might need to do some math with triDivXn so make a copy
 00000120 000C0C00                          mov     remndr, remndr                  ;copy/save remndr to itself to check for zero
 00000121 0403006D                          bcnd    no_add, Z                       ;if remainder is zero then don't add one more this time
 00000122 16010101                          add     work_1, work_1, #1              ;else add one to it to get total triangles for this thread and store in LPCNT1
 00000123 180C0C01                          sub     remndr, remndr, #1              ;and subtract one from remainder
                                ;
                                ;--------------transfer parameters to each GPU's datapool --------------------------------------------------------
                                ;
 00000124 1A730109              no_add:     mul     AR3, work_1, #9                 ;load AR3 with number of triangles for the current GPU
 00000125 007A0100                          mov     *AR2++, work_1                  ;copy into this GPU's datapool the number of triangles this GPU is to process 
 00000126 18737301                          sub     AR3, AR3, #1                    ;adjust AR3 for use as immediate value for rpt (rpt does not include the first execute, since it is "repeat")
 00000127 306C0008                          rpt     #8                              ;copy the qty (9) 3D transform parameters to current PDB using repeat instruction
 00000128 007A7800                          mov     *AR2++, *AR0++                  ;copy SCALX, SCALY, SCALZ, ROTX, ROTY, ROTZ, TRANSX, TRANSY, TRANSZ to this GPU's datapool
                                                                                    ;after execution of RPT, AR2 is now pointing to first X1 dest and AR0 is now pointing to first X1 source
 00000129 00700A00                          mov     AR0, src_save                   ;load AR0 with source pointer to first triangle
 0000012A 04001E6D                          nop                                     ;give AR0 to load before use two more clocks downstream from here
                                ;            
                                ;--------------transfer vector data from program memory to each GPU's datapool -----------------------------------            
                                ;
 0000012B 006C7700              triLoop:    rpt     [AR3]                           ;copy contents of AR3 into repeat counter [...] means immediately available
 0000012C 007A7800                          mov     *AR2++, *AR0++
 0000012D 000A7000                          mov     src_save, AR0                   ;save pointer to next triangle source location
 0000012E 00727900                          mov     AR2, *AR1++                     ;point back to first location in this GPU's datapool (command input register)
                                                                                    ;after execution, AR1 is now pointing to next GPU's datapool pointer
 0000012F 3076010B                          mov     *AR2, #XFORM_XYZ                ;write start address (command semaphore) to current datapool                                              
 00000130 04ED0F66                          dbnz    xferLoop, LPCNT0                ;xfer next group of parameters and data to next PDB until entire 3D object is loaded
 00000131 0400105F              wait1:      btbs    wait1, 16, INTEN                ;wait for GPU0 done bit to go low indicating it has begun processing            
                                
                                ;
                                ;--------------transfer results from datapool(s) back to program memory-------------------------------------------
                                ;
 00000132 000C0300                          mov     remndr, work_3                  ;copy work_3 into remainder to restore it
 00000133 00660D00                          mov     LPCNT0, GPUs                    ;load LPCNT0 with number of PDBs to copy back to program memory
 00000134 0400505F              wait2:      btbc    wait2, 16, INTEN                ;wait until GPU0 is done then pull results from each GPU datapool and store in program memory at original locations
 00000135 20710002                          mov     AR1, @firstTri_list             ;load AR1 with pointer to pointer for first triangle of current GPU datapool to be read out
 00000136 20720006                          mov     AR2, @stl_first_tri             ;load AR2 with pointer to first triangle dest location of .stl file in program memory
 00000137 00010B00              nextDPool:  mov     work_1, triDivXn                ;copy number of triangles per thread to work_1
 00000138 000C0C00                          mov     remndr, remndr                  ;see if remainder is zero
 00000139 0403006D                          bcnd    copyDPool, Z                    ;if zero then don't add one more from remainder
 0000013A 16010101                          add     work_1, work_1, #1
 0000013B 180C0C01                          sub     remndr, remndr, #1              ;sub 1
 0000013C 1A730109              copyDPool:  mul     AR3, work_1, #9                 ;determine length of transfer
 0000013D 00707900                          mov     AR0, *AR1++                     ;copy pointer for GPU0 datapool first triangle location to AR0 then make AR1 point to next datapool for next pass (if any) 
 0000013E 18737301                          sub     AR3, AR3, #1                    ;subtract 1 since RPT following instruction is executed then repeated n times
 0000013F 04001E6D                          nop                                     ;sub needs time to execute before AR3 results are available for use by RPT
 00000140 006C7700                          rpt     [AR3]
 00000141 007A7800                          mov     *AR2++, *AR0++
 00000142 04F50F66                          dbnz    nextDPool, LPCNT0               ;pull next datapool results (if any)
 00000143 126D6D20                          or      STATUS, STATUS, #DONE_BIT       ;set CPU done bit to signal test bench processing has completed
 00000144 306F0144              done:       mov     PC, #done                       ;spin here  
                                          
                                ; ---------------------- interrupt/exception service routines ---------------------------------------------        
 00000145 006B6E00              NMI_:       mov     *SP--, PC_COPY               ;save return address from non-maskable interrupt (time-out timer in this instance)
 00000146 30652710                          mov     TIMER, #10000                   ;put a new value in the timer
 00000147 006F6A00                          mov     PC, *SP++                    ;return from interrupt
                                        
 00000148 006B6E00              INV_:       mov     *SP--, PC_COPY       ;save return address from floating-point invalid operation exception, which is maskable
 00000149 30652710                          mov     TIMER, #10000           ;put a new value in the timer
 0000014A 0005D100                          mov     work_5, SQRT_1          ;retrieve the NaN with payload (this quiet NaN replaced the signaling NaN that caused the INV exc)
 0000014B 006F6A00                          mov     PC, *SP++            ;return from interrupt
                                            
 0000014C 006B6E00              DIVx0_:     mov     *SP--, PC_COPY     ;save return address from floating-point divide by 0 exception, which is maskable
 0000014D 00066000                          mov     capt0_save, CAPTURE0    ;read out CAPTURE0 register and save it
 0000014E 00076100                          mov     capt1_save, CAPTURE1    ;read out CAPTURE1 register and save it
 0000014F 00086200                          mov     capt2_save, CAPTURE2    ;read out CAPTURE2 register and save it
 00000150 00096300                          mov     capt3_save, CAPTURE3    ;read out CAPTURE3 register and save it
 00000151 30652710                          mov     TIMER, #10000           ;put a new value in the timer
 00000152 006F6A00                          mov     PC, *SP++          ;return from interrupt
                                
 00000153 006B6E00              OVFL_:      mov     *SP--, PC_COPY      ;save return address from floating-point overflow exception, which is maskable
 00000154 30652710                          mov     TIMER, #10000           ;put a new value in the timer
 00000155 006F6A00                          mov     PC, *SP++           ;return from interrupt
                                
 00000156 006B6E00              UNFL_:      mov     *SP--, PC_COPY      ;save return address from floating-point underflow exception, which is maskable
 00000157 30652710                          mov     TIMER, #10000           ;put a new value in the timer
 00000158 006F6A00                          mov     PC, *SP++           ;return from interrupt
                                
 00000159 006B6E00              INEXT_:     mov     *SP--, PC_COPY      ;save return address from floating-point inexact exception, which is maskable
 0000015A 30652710                          mov     TIMER, #10000           ;put a new value in the timer
 0000015B 006F6A00                          mov     PC, *SP++           ;return from interrupt
                                
 0000015C 006B6E00              IRQ_:       mov     *SP--, PC_COPY    ;save return address (general-purpose, maskable interrupt)
 0000015D 30652710                          mov     TIMER, #10000           ;put a new value in the timer
 0000015E 006F6A00                          mov     PC, *SP++         ;return from interrupt
                                            
                                
 0000015F                                       org     $                   ;this is the offset in data memory where these pointers can be accessed from program memory
 0000015F 00FC0000              GPU0_datapool:  dfl     0x00FC0000          ;First location of GPU0 datapool (also the command register for GPU0
 00000160 00FD0000              GPU1_datapool:  dfl     0x00FD0000          ;First location of GPU1 datapool (also the command register for GPU1
 00000161 00FE0000              GPU2_datapool:  dfl     0x00FE0000          ;First location of GPU2 datapool (also the command register for GPU2
 00000162 00FF0000              GPU3_datapool:  dfl     0x00FF0000          ;First location of GPU3 datapool (also the command register for GPU3
                                
 00000163 00FC000B              FIRSTtriGPU0:   dfl     0x00FC000B          ;this is the location in GPU0 datapool containing first triangle X1
 00000164 00FD000B              FIRSTtriGPU1:   dfl     0x00FD000B          ;this is the location in GPU1 datapool containing first triangle X1
 00000165 00FE000B              FIRSTtriGPU2:   dfl     0x00FE000B          ;this is the location in GPU2 datapool containing first triangle X1
 00000166 00FF000B              FIRSTtriGPU3:   dfl     0x00FF000B          ;this is the location in GPU3 datapool containing first triangle X1
                                
                                
 00000200                       stl_start:  org     0x00000200              ; test .stl file and parameters are loaded starting at this address
 00000201                       tri_count:  org     $+1
                                ;parameters for this particular 3D transform test run
 00000202                       parameters: org     $+1
 00000202 0000001D              rotx:       dfl     29                      ;rotate around x axis in integer degrees  
 00000203 0000002C              roty:       dfl     44                      ;rotate around y axis in integer degrees  
 00000204 0000004B              rotz:       dfl     75                      ;rotate around z axis in integer degrees  
 00000205 40000000              scalx:      dff     2.0                     ;scale X axis amount real
 00000206 40000000              scaly:      dff     2.0                     ;scale y axis amount real
 00000207 40100000              scalz:      dff     2.25                    ;scale Z axis amount real
 00000208 40980000              transx:     dff     4.75                    ;translate on X axis amount real
 00000209 4077AE14              transy:     dff     3.87                    ;translate on Y axis amount real
 0000020A 400F2B02              transz:     dff     2.237                   ;translate on Z axis amount real
                                
                                ;rotx:      dfl     0                       ;rotate around x axis in integer degrees  
                                ;roty:      dfl     0                       ;rotate around y axis in integer degrees  
                                ;rotz:      dfl     0                       ;rotate around z axis in integer degrees  
                                ;scalx:     dff     1.0                     ;scale X axis amount real
                                ;scaly:     dff     1.0                     ;scale y axis amount real
                                ;scalz:     dff     1.0                     ;scale Z axis amount real
                                ;transx:    dff     0.0                     ;translate on X axis amount real
                                ;transy:    dff     0.0                     ;translate on Y axis amount real
                                ;transz:    dff     0.0                     ;translate on Z axis amount real
 0000020B                       first_tri:  org     $
                                
                                
                                
 0000020B                       progend:        
 00000000                                   end
00000070  AR0                00000071  AR1                00000072  AR2                
00000073  AR3                00000006  CAPT0_SAVE         00000007  CAPT1_SAVE         
00000008  CAPT2_SAVE         00000009  CAPT3_SAVE         00000060  CAPTURE0           
00000061  CAPTURE1           00000062  CAPTURE2           00000063  CAPTURE3           
00000000  CLRGPURSTMASK      000000FE  CONSTANTS          0000013C  COPYDPOOL          
00000064  CREG               00000001  DATAPOOL_LIST      0000014C  DIVX0_             
00000103  DIVX0_VECT         0000005E  DMA0_CSR           0000005D  DMA0_RDADDRS       
0000005C  DMA0_WRADDRS       00000144  DONE               00000020  DONE_BIT           
000000F8  EXP_0              000000F9  EXP_1              000000FA  EXP_2              
000000FB  EXP_3              000000FC  EXP_4              000000FD  EXP_5              
000000FE  EXP_6              000000FF  EXP_7              00000080  FADD_0             
00000081  FADD_1             00000082  FADD_2             00000083  FADD_3             
00000084  FADD_4             00000085  FADD_5             00000086  FADD_6             
00000087  FADD_7             00000088  FADD_8             00000089  FADD_9             
0000008A  FADD_A             0000008B  FADD_B             0000008C  FADD_C             
0000008D  FADD_D             0000008E  FADD_E             0000008F  FADD_F             
000000C0  FDIV_0             000000C1  FDIV_1             000000C2  FDIV_2             
000000C3  FDIV_3             000000C4  FDIV_4             000000C5  FDIV_5             
000000C6  FDIV_6             000000C7  FDIV_7             000000C8  FDIV_8             
000000C9  FDIV_9             000000CA  FDIV_A             000000CB  FDIV_B             
000000CC  FDIV_C             000000CD  FDIV_D             000000CE  FDIV_E             
000000CF  FDIV_F             00000163  FIRSTTRIGPU0       00000164  FIRSTTRIGPU1       
00000165  FIRSTTRIGPU2       00000166  FIRSTTRIGPU3       00000002  FIRSTTRI_LIST      
0000020B  FIRST_TRI          000000E0  FMA_0              000000E1  FMA_1              
000000E2  FMA_2              000000E3  FMA_3              000000E4  FMA_4              
000000E5  FMA_5              000000E6  FMA_6              000000E7  FMA_7              
000000E8  FMA_8              000000E9  FMA_9              000000EA  FMA_A              
000000EB  FMA_B              000000EC  FMA_C              000000ED  FMA_D              
000000EE  FMA_E              000000EF  FMA_F              000000A0  FMUL_0             
000000A1  FMUL_1             000000A2  FMUL_2             000000A3  FMUL_3             
000000A4  FMUL_4             000000A5  FMUL_5             000000A6  FMUL_6             
000000A7  FMUL_7             000000A8  FMUL_8             000000A9  FMUL_9             
000000AA  FMUL_A             000000AB  FMUL_B             000000AC  FMUL_C             
000000AD  FMUL_D             000000AE  FMUL_E             000000AF  FMUL_F             
00000090  FSUB_0             00000091  FSUB_1             00000092  FSUB_2             
00000093  FSUB_3             00000094  FSUB_4             00000095  FSUB_5             
00000096  FSUB_6             00000097  FSUB_7             00000098  FSUB_8             
00000099  FSUB_9             0000009A  FSUB_A             0000009B  FSUB_B             
0000009C  FSUB_C             0000009D  FSUB_D             0000009E  FSUB_E             
0000009F  FSUB_F             000000B8  FTOI_0             000000B9  FTOI_1             
000000BA  FTOI_2             000000BB  FTOI_3             000000BC  FTOI_4             
000000BD  FTOI_5             000000BE  FTOI_6             000000BF  FTOI_7             
0000015F  GPU0_DATAPOOL      00000160  GPU1_DATAPOOL      00000161  GPU2_DATAPOOL      
00000162  GPU3_DATAPOOL      0000000D  GPUS               00000159  INEXT_             
00000106  INEXT_VECT         00000118  INITIALIZE         0000005F  INTEN              
00000148  INV_               00000102  INV_VECT           0000015C  IRQ_               
00000107  IRQ_VECT           00000112  IS_IT_2            0000010E  IS_IT_4            
000000B0  ITOF_0             000000B1  ITOF_1             000000B2  ITOF_2             
000000B3  ITOF_3             000000B4  ITOF_4             000000B5  ITOF_5             
000000B6  ITOF_6             000000B7  ITOF_7             00000116  ITS_1              
000000F0  LOG_0              000000F1  LOG_1              000000F2  LOG_2              
000000F3  LOG_3              000000F4  LOG_4              000000F5  LOG_5              
000000F6  LOG_6              000000F7  LOG_7              00000066  LPCNT0             
00000067  LPCNT1             00000137  NEXTDPOOL          00000145  NMI_               
00000101  NMI_VECT           00000124  NO_ADD             00800000  OFFSET             
00000153  OVFL_              00000104  OVFL_VECT          00000202  PARAMETERS         
0000006F  PC                 0000006E  PC_COPY            0000020B  PROGEND            
000000FF  PROG_LEN           0000000C  REMNDR             00000202  ROTX               
00000203  ROTY               00000204  ROTZ               0000006C  RPT                
00000100  RST_VECT           00000205  SCALX              00000206  SCALY              
00000207  SCALZ              0000000E  SIGN_MASK          00000069  SNOP               
00000068  SP                 0000006A  SPOP               0000006B  SPSH               
000000D0  SQRT_0             000000D1  SQRT_1             000000D2  SQRT_2             
000000D3  SQRT_3             000000D4  SQRT_4             000000D5  SQRT_5             
000000D6  SQRT_6             000000D7  SQRT_7             000000D8  SQRT_8             
000000D9  SQRT_9             000000DA  SQRT_A             000000DB  SQRT_B             
000000DC  SQRT_C             000000DD  SQRT_D             000000DE  SQRT_E             
000000DF  SQRT_F             0000000A  SRC_SAVE           00000108  START              
0000006D  STATUS             00000003  STL_FILE           00000006  STL_FIRST_TRI      
00000200  STL_START          00000005  STL_TRI_COUNT      00000065  TIMER              
00000208  TRANSX             00000209  TRANSY             0000020A  TRANSZ             
00000004  TRANS_PARAM        0000000F  TRIANGLES          0000000B  TRIDIVXN           
0000012B  TRILOOP            00000201  TRI_COUNT          00000156  UNFL_              
00000105  UNFL_VECT          0000005B  VECTOR             00000131  WAIT1              
00000134  WAIT2              00000001  WORK_1             00000002  WORK_2             
00000003  WORK_3             00000004  WORK_4             00000005  WORK_5             
0000011D  XFERLOOP           0000010B  XFORM_XYZ          
