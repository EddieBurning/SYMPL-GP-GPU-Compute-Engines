 00000000                                  CPU  "SYMPL_IL.TBL"
 00000000                                  HOF  "MOT32"
 00000000                                  WDLN 4
                                ; CGS FP3211 test1
                                ; version 1.01   Nov 29, 2015
                                ; Author:  Jerry D. Harthcock
                                ; Copyright (C) 2015.  All rights reserved without prejudice.
                                           
                                ;--------------------------------------------------------------------------           
                                ;         internal memory-mapped h/w registers
                                ;--------------------------------------------------------------------------
 00000073         =             AR3:            EQU     0x73                    ;Auxiliary Reg 3
 00000072         =             AR2:            EQU     0x72                    ;Auxiliary Reg 2
 00000071         =             AR1:            EQU     0x71                    ;Auxiliary Reg 1
 00000070         =             AR0:            EQU     0x70                    ;Auxiliary Reg 0
 0000006F         =             PC:             EQU     0x6F                    ;Program Counter
 0000006E         =             PC_COPY:        EQU     0x6E
 0000006D         =             STATUS:         EQU     0x6D                    ;Statis Register
 0000006C         =             RPT:            EQU     0x6C                    ;repeat counter location
 0000006B         =             SPSH:           EQU     0x6B                    ;stack push
 0000006A         =             SPOP:           EQU     0x6A                    ;stack pop
 00000069         =             SNOP:           EQU     0x69                    ;stack read or write without SP modification
 00000068         =             SP:             EQU     0x68
 00000067         =             LPCNT1:         EQU     0x67                    ;H/W loop counter 1
 00000066         =             LPCNT0:         EQU     0x66                    ;H/W loop counter 0
 00000065         =             TIMER:          EQU     0x65                    ;timer
 00000064         =             CREG:           EQU     0x64                    ;CREG for FMA and DOT
 00000063         =             CAPTURE3:       EQU     0x63                    ;alternate delayed exception capture register 3
 00000062         =             CAPTURE2:       EQU     0x62                    ;alternate delayed exception capture register 2
 00000061         =             CAPTURE1:       EQU     0x61                    ;alternate delayed exception capture register 1
 00000060         =             CAPTURE0:       EQU     0x60                    ;alternate delayed exception capture register 0
 0000005F         =             INTEN:          EQU     0x5F                    ;IRQ_in[15:0] (first 16 MSBs) & interrupt enable register (lower 16 LSBs)
 0000005E         =             DMA0_CSR:       EQU     0x5E                    ;DMA_Done is DMAn_CSR[21], interrupt enable is DMAn_CSR[20], 20-bit count value {DMAn_CSR[19:0]}
 0000005D         =             DMA0_RDADDRS:   EQU     0x5D                    ;DMA0 reads from DataPool
 0000005C         =             DMA0_WRADDRS:   EQU     0x5C                    ;DMA0 writes to GPU
 0000005B         =             VECTOR:         EQU     0x5B                    ;2 MSBs contain GPU count and 4 LSBs contain interrupt vector offset
                                
                                ;zero-page storage
 00000001         =             byte:           EQU     0x01                    
 00000002         =             short:          EQU     0x02
 00000003         =             word:           EQU     0x03
 00000004         =             work_4:         EQU     0x04
 00000005         =             work_5:         EQU     0x05
 00000006         =             capt0_save:     EQU     0x06                    ;alternate delayed exception capture register 0 save location
 00000007         =             capt1_save:     EQU     0x07                    ;alternate delayed exception capture register 1 save location
 00000008         =             capt2_save:     EQU     0x08                    ;alternate delayed exception capture register 2 save location
 00000009         =             capt3_save:     EQU     0x09                    ;alternate delayed exception capture register 3 save location
 0000000A         =             src_save:       EQU     0x0A                    ;used to save source pointer
 0000000B         =             triDivXn:       EQU     0x0B                    ;number of triangles per quad-shader GPU, not counting remainder
 0000000C         =             remndr:         EQU     0x0C                    ;remainder of total triangles/n threads, must add one additional triangle to 
                                                                                ;the triangles/n amount for each thread until the remainder runs out                                                
 0000000E         =             sign_mask:      EQU     0x0E                    ;0x80000000 goes here--used for setting, clearing, toggling sign bit
                                                                                                                                                                
                                ;constant immediate value equates
 00000020         =             DONE_BIT:       EQU     0x20                    ;bit [5] is DONE Bit in status register 
                                
                                
 00800000         =             offset:         EQU     0x00800000              ;offset needed to access program memory space decode
                                
 00000000                                       org     0x00000000              ;program memory starts here
 00000000 F0FFFFFF              CLRgpuRSTmask:  dfl     0xF0FFFFFF              ;use this mask to clear all four GPU resets
                                
 00000001 00008000              test_RAM_start: dfl     0x00008000              ;start of test RAM
 00000002 00001000              test_RAM_depth: dfl     0x00001000              ;depth of test RAM in bytes
 00000003 000000A5              test_byte:      dfl     0x000000A5              ;value for testing bytes
 00000004 00005A6E              test_short:     dfl     0x00005A6E              ;value for testing short integer
 00000005 A5EC5321              test_word:      dfl     0xA5EC5321              ;value for testing word
 00000006 04000000              word_incr:      dfl     0x04000000              ;word increment amount for byte memory
 00000007 02000000              short_incr:     dfl     0x02000000              ;short increment amount for byte memory
 00000008 01000000              byte_incr:      dfl     0x01000000              ;byte increment amount for byte memory
 00000009 000000FF              fill_Fs_8:      dfl     0x000000FF              
 0000000A 0000FFFF              fill_Fs_16:     dfl     0x0000FFFF
 0000000B FFFFFFFF              fill_Fs_32:     dfl     0xFFFFFFFF
 0000000C FFFFFF00              fill_0s_8:      dfl     0xFFFFFF00
 0000000D FFFF0000              fill_0s_16:     dfl     0xFFFF0000
 0000000E 00000000              fill_0s_32:     dfl     0x00000000        
                                            
 000000FE                                   org     0x0FE              
                                
 000000FE 00000108              Constants:  DFL     start                       ;program memory locations 0x000 - 0x0FF reserved for look-up table
                                        
 000000FF 00000202              prog_len:   DFL     progend - Constants
                                              
                                ;           func    dest, srcA, srcB 
                                
 00000100                                   org     0x00000100
 00000100 306F0108              RST_VECT:   mov     PC, #start              ;reset vector
 00000101 306F0151              NMI_VECT:   mov     PC, #NMI_               ;NMI vector
 00000102 306F0154              INV_VECT:   mov     PC, #INV_               ;invalid operation exception vector location
 00000103 306F0158              DIVx0_VECT: mov     PC, #DIVx0_             ;divide by 0 exception vector location
 00000104 306F015F              OVFL_VECT:  mov     PC, #OVFL_              ;overflow exception vector location
 00000105 306F0162              UNFL_VECT:  mov     PC, #UNFL_              ;underflow exception vector location
 00000106 306F0165              INEXT_VECT: mov     PC, #INEXT_             ;inexact exception vector location
 00000107 306F0168              IRQ_VECT:   mov     PC, #IRQ_               ;maskable general-purpose interrupt vector
                                
 00000108                       start:     
                                            
                                    ;entry point to the 3D transform CGS routine                
                                    ;determine number of threads available
 00000108 3068003F                          mov     SP, #0x3F
 00000109 20700008                          mov     AR0, @byte_incr
 0000010A 20700001                          mov     AR0, @test_RAM_start
 0000010B 136D6D20                          xor     STATUS, STATUS, #DONE_BIT                   
 0000010C 20010003                          mov     byte, @test_byte
 0000010D 20020004                          mov     short, @test_short
 0000010E 20030005                          mov     word, @test_word
 0000010F 30660080                          mov     LPCNT0, #0x080
 00000110 80740100              byte_loop:  mov.b     *AR0, byte
 00000111 04001E6D                          nop
 00000112 04001E6D                          nop
 00000113 80047400                          mov.b     work_4, *AR0        ;read it back and store in work_4
 00000114 04001E6D                          nop
 00000115 04001E6D                          nop
 00000116 110404FF                          and     work_4, work_4, #0x000000FF
 00000117 08040401                          sub     work_4, work_4, byte
 00000118 0435406D                          btbc    fail_1, 0, STATUS
 00000119 A0740009                          mov.b     *AR0, @fill_Fs_8
 0000011A 04001E6D                          nop
 0000011B 04001E6D                          nop
 0000011C 80047800                          mov.b     work_4, *AR0++
 0000011D 04001E6D                          nop
 0000011E 04001E6D                          nop            
 0000011F 110404FF                          and     work_4, work_4, #0x000000FF
 00000120 28040904                          sub     work_4, @fill_Fs_8, work_4
 00000121 042C406D                          btbc    fail_1, 0, STATUS
 00000122 04EE0F66                          dbnz    byte_loop, LPCNT0
                                            
 00000123 20700008                          mov     AR0, @byte_incr
 00000124 20700001                          mov     AR0, @test_RAM_start
 00000125 04001E6D                          nop            
 00000126 30660080                          mov     LPCNT0, #0x080
 00000127 40740200              short_loop: mov.h     *AR0, short
 00000128 04001E6D                          nop
 00000129 04001E6D                          nop
 0000012A 40047400                          mov.h     work_4, *AR0        ;read it back and store in work_4
 0000012B 04001E6D                          nop
 0000012C 04001E6D                          nop
 0000012D 08040402                          sub     work_4, work_4, short
 0000012E 041F406D                          btbc    fail_1, 0, STATUS
 0000012F 6074000D                          mov.h     *AR0, @fill_0s_16
 00000130 04001E6D                          nop
 00000131 04001E6D                          nop
 00000132 40047800                          mov.h     work_4, *AR0++
 00000133 04001E6D                          nop
 00000134 04001E6D                          nop
 00000135 18040400                          sub     work_4, work_4, #0
 00000136 0417406D                          btbc    fail_1, 0, STATUS
 00000137 04F00F66                          dbnz    short_loop, LPCNT0
                                
 00000138 20700008                          mov     AR0, @byte_incr
 00000139 20700001                          mov     AR0, @test_RAM_start
 0000013A 04001E6D                          nop            
 0000013B 30660080                          mov     LPCNT0, #0x080
 0000013C 00740300              word_loop:  mov     *AR0, word
 0000013D 04001E6D                          nop
 0000013E 04001E6D                          nop
 0000013F 00047400                          mov     work_4, *AR0        ;read it back and store in work_4
 00000140 04001E6D                          nop
 00000141 04001E6D                          nop
 00000142 08040403                          sub     work_4, work_4, word
 00000143 040A406D                          btbc    fail_1, 0, STATUS
 00000144 2074000B                          mov     *AR0, @fill_Fs_32
 00000145 04001E6D                          nop
 00000146 04001E6D                          nop
 00000147 00047800                          mov     work_4, *AR0++
 00000148 04001E6D                          nop
 00000149 04001E6D                          nop            
 0000014A 28040B04                          sub     work_4, @fill_Fs_32, work_4
 0000014B 0402406D                          btbc    fail_1, 0, STATUS
 0000014C 04F00F66                          dbnz    word_loop, LPCNT0
                                
                                            
 0000014D 126D6D20              fail_1:     or      STATUS, STATUS, #DONE_BIT       ;set CPU done bit to signal test bench processing has completed
 0000014E 04FF1F6D                          bcnd    fail_1, ALWAYS
                                            
 0000014F 126D6D20              done:       or      STATUS, STATUS, #DONE_BIT       ;set CPU done bit to signal test bench processing has completed
 00000150 306F014F                          mov     PC, #done                       ;spin here  
                                          
                                ; ---------------------- interrupt/exception service routines ---------------------------------------------        
 00000151 006B6E00              NMI_:       mov     *SP--, PC_COPY               ;save return address from non-maskable interrupt (time-out timer in this instance)
 00000152 30652710                          mov     TIMER, #10000                   ;put a new value in the timer
 00000153 006F6A00                          mov     PC, *SP++                    ;return from interrupt
                                        
 00000154 006B6E00              INV_:       mov     *SP--, PC_COPY       ;save return address from floating-point invalid operation exception, which is maskable
 00000155 30652710                          mov     TIMER, #10000           ;put a new value in the timer
 00000156 0005D100                          mov     work_5, SQRT_1          ;retrieve the NaN with payload (this quiet NaN replaced the signaling NaN that caused the INV exc)
 00000157 006F6A00                          mov     PC, *SP++            ;return from interrupt
                                            
 00000158 006B6E00              DIVx0_:     mov     *SP--, PC_COPY     ;save return address from floating-point divide by 0 exception, which is maskable
 00000159 00066000                          mov     capt0_save, CAPTURE0    ;read out CAPTURE0 register and save it
 0000015A 00076100                          mov     capt1_save, CAPTURE1    ;read out CAPTURE1 register and save it
 0000015B 00086200                          mov     capt2_save, CAPTURE2    ;read out CAPTURE2 register and save it
 0000015C 00096300                          mov     capt3_save, CAPTURE3    ;read out CAPTURE3 register and save it
 0000015D 30652710                          mov     TIMER, #10000           ;put a new value in the timer
 0000015E 006F6A00                          mov     PC, *SP++          ;return from interrupt
                                
 0000015F 006B6E00              OVFL_:      mov     *SP--, PC_COPY      ;save return address from floating-point overflow exception, which is maskable
 00000160 30652710                          mov     TIMER, #10000           ;put a new value in the timer
 00000161 006F6A00                          mov     PC, *SP++           ;return from interrupt
                                
 00000162 006B6E00              UNFL_:      mov     *SP--, PC_COPY      ;save return address from floating-point underflow exception, which is maskable
 00000163 30652710                          mov     TIMER, #10000           ;put a new value in the timer
 00000164 006F6A00                          mov     PC, *SP++           ;return from interrupt
                                
 00000165 006B6E00              INEXT_:     mov     *SP--, PC_COPY      ;save return address from floating-point inexact exception, which is maskable
 00000166 30652710                          mov     TIMER, #10000           ;put a new value in the timer
 00000167 006F6A00                          mov     PC, *SP++           ;return from interrupt
                                
 00000168 006B6E00              IRQ_:       mov     *SP--, PC_COPY    ;save return address (general-purpose, maskable interrupt)
 00000169 30652710                          mov     TIMER, #10000           ;put a new value in the timer
 0000016A 006F6A00                          mov     PC, *SP++         ;return from interrupt
                                            
 0000016B                       pointers:       org $ 
                                            
                                
 00000200                       text_in:        org     $200                   ;this is where the text file is first loaded by test bench
                                                
                                                
 00000300                       text_out:       org     $300                   ;this is where results are written back from 8-bit aligned memory
                                
 00000300                       progend:        
 00000000                                   end
00000070  AR0                00000071  AR1                00000072  AR2                
00000073  AR3                00000001  BYTE               00000008  BYTE_INCR          
00000110  BYTE_LOOP          00000006  CAPT0_SAVE         00000007  CAPT1_SAVE         
00000008  CAPT2_SAVE         00000009  CAPT3_SAVE         00000060  CAPTURE0           
00000061  CAPTURE1           00000062  CAPTURE2           00000063  CAPTURE3           
00000000  CLRGPURSTMASK      000000FE  CONSTANTS          00000064  CREG               
00000158  DIVX0_             00000103  DIVX0_VECT         0000005E  DMA0_CSR           
0000005D  DMA0_RDADDRS       0000005C  DMA0_WRADDRS       0000014F  DONE               
00000020  DONE_BIT           000000F8  EXP_0              000000F9  EXP_1              
000000FA  EXP_2              000000FB  EXP_3              000000FC  EXP_4              
000000FD  EXP_5              000000FE  EXP_6              000000FF  EXP_7              
00000080  FADD_0             00000081  FADD_1             00000082  FADD_2             
00000083  FADD_3             00000084  FADD_4             00000085  FADD_5             
00000086  FADD_6             00000087  FADD_7             00000088  FADD_8             
00000089  FADD_9             0000008A  FADD_A             0000008B  FADD_B             
0000008C  FADD_C             0000008D  FADD_D             0000008E  FADD_E             
0000008F  FADD_F             0000014D  FAIL_1             000000C0  FDIV_0             
000000C1  FDIV_1             000000C2  FDIV_2             000000C3  FDIV_3             
000000C4  FDIV_4             000000C5  FDIV_5             000000C6  FDIV_6             
000000C7  FDIV_7             000000C8  FDIV_8             000000C9  FDIV_9             
000000CA  FDIV_A             000000CB  FDIV_B             000000CC  FDIV_C             
000000CD  FDIV_D             000000CE  FDIV_E             000000CF  FDIV_F             
0000000D  FILL_0S_16         0000000E  FILL_0S_32         0000000C  FILL_0S_8          
0000000A  FILL_FS_16         0000000B  FILL_FS_32         00000009  FILL_FS_8          
000000E0  FMA_0              000000E1  FMA_1              000000E2  FMA_2              
000000E3  FMA_3              000000E4  FMA_4              000000E5  FMA_5              
000000E6  FMA_6              000000E7  FMA_7              000000E8  FMA_8              
000000E9  FMA_9              000000EA  FMA_A              000000EB  FMA_B              
000000EC  FMA_C              000000ED  FMA_D              000000EE  FMA_E              
000000EF  FMA_F              000000A0  FMUL_0             000000A1  FMUL_1             
000000A2  FMUL_2             000000A3  FMUL_3             000000A4  FMUL_4             
000000A5  FMUL_5             000000A6  FMUL_6             000000A7  FMUL_7             
000000A8  FMUL_8             000000A9  FMUL_9             000000AA  FMUL_A             
000000AB  FMUL_B             000000AC  FMUL_C             000000AD  FMUL_D             
000000AE  FMUL_E             000000AF  FMUL_F             00000090  FSUB_0             
00000091  FSUB_1             00000092  FSUB_2             00000093  FSUB_3             
00000094  FSUB_4             00000095  FSUB_5             00000096  FSUB_6             
00000097  FSUB_7             00000098  FSUB_8             00000099  FSUB_9             
0000009A  FSUB_A             0000009B  FSUB_B             0000009C  FSUB_C             
0000009D  FSUB_D             0000009E  FSUB_E             0000009F  FSUB_F             
000000B8  FTOI_0             000000B9  FTOI_1             000000BA  FTOI_2             
000000BB  FTOI_3             000000BC  FTOI_4             000000BD  FTOI_5             
000000BE  FTOI_6             000000BF  FTOI_7             00000165  INEXT_             
00000106  INEXT_VECT         0000005F  INTEN              00000154  INV_               
00000102  INV_VECT           00000168  IRQ_               00000107  IRQ_VECT           
000000B0  ITOF_0             000000B1  ITOF_1             000000B2  ITOF_2             
000000B3  ITOF_3             000000B4  ITOF_4             000000B5  ITOF_5             
000000B6  ITOF_6             000000B7  ITOF_7             000000F0  LOG_0              
000000F1  LOG_1              000000F2  LOG_2              000000F3  LOG_3              
000000F4  LOG_4              000000F5  LOG_5              000000F6  LOG_6              
000000F7  LOG_7              00000066  LPCNT0             00000067  LPCNT1             
00000151  NMI_               00000101  NMI_VECT           00800000  OFFSET             
0000015F  OVFL_              00000104  OVFL_VECT          0000006F  PC                 
0000006E  PC_COPY            0000016B  POINTERS           00000300  PROGEND            
000000FF  PROG_LEN           0000000C  REMNDR             0000006C  RPT                
00000100  RST_VECT           00000002  SHORT              00000007  SHORT_INCR         
00000127  SHORT_LOOP         0000000E  SIGN_MASK          00000069  SNOP               
00000068  SP                 0000006A  SPOP               0000006B  SPSH               
000000D0  SQRT_0             000000D1  SQRT_1             000000D2  SQRT_2             
000000D3  SQRT_3             000000D4  SQRT_4             000000D5  SQRT_5             
000000D6  SQRT_6             000000D7  SQRT_7             000000D8  SQRT_8             
000000D9  SQRT_9             000000DA  SQRT_A             000000DB  SQRT_B             
000000DC  SQRT_C             000000DD  SQRT_D             000000DE  SQRT_E             
000000DF  SQRT_F             0000000A  SRC_SAVE           00000108  START              
0000006D  STATUS             00000003  TEST_BYTE          00000002  TEST_RAM_DEPTH     
00000001  TEST_RAM_START     00000004  TEST_SHORT         00000005  TEST_WORD          
00000200  TEXT_IN            00000300  TEXT_OUT           00000065  TIMER              
0000000B  TRIDIVXN           00000162  UNFL_              00000105  UNFL_VECT          
0000005B  VECTOR             00000003  WORD               00000006  WORD_INCR          
0000013C  WORD_LOOP          00000004  WORK_4             00000005  WORK_5             

